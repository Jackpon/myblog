{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to here \uff01\n\n\u6211\u5efa\u6b64\u7f51\u7ad9\u7684\u521d\u8877\u662f\u4e3a\u4e86\u6574\u7406\u81ea\u5df1\u7b97\u6cd5\u601d\u8def\uff0c\u63a2\u7d22\u7b97\u6cd5\u7684\u4e50\u8da3\u3002\n\u5982\u679c\u4f60\u4e5f\u5bf9\u6b64\u611f\u5174\u8da3\uff0c\u6b22\u8fce\u4e00\u8d77\u6765\u63a2\u8ba8\u5b66\u4e60\uff0c\u9644\u4e0a\u6211\u7684\u8054\u7cfb\u65b9\u5f0f\u3002\n\n\n\u90ae\u7bb1\uff1a\n JackpongWong@163.com",
            "title": "Home"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Intersection of Two Linked Lists/",
            "text": "160. Intersection of Two Linked Lists\n\n\nWrite a program to find the node at which the intersection of two singly linked lists begins.\nFor example, the following two linked lists:\n\n\nA:          a1 \u2192 a2\n                   \u2198\n                     c1 \u2192 c2 \u2192 c3\n                   \u2197            \nB:     b1 \u2192 b2 \u2192 b3\nbegin to intersect at node c1.\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode>  set =new HashSet<>();\n        //\u5c06headA\u6dfb\u52a0\u5230set\n        while(headA != null){\n            set.add(headA);\n            headA = headA.next;\n        }\n        //\u6bd4\u8f83headB\uff0c\u4e0d\u540c\u5219return\n         while(headB != null) {\n             if(set.contains(headB))\n                 return headB;\n             headB = headB.next;\n         }\n        return null;\n    }\n}",
            "title": "Intersection of Two Linked Lists"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Linked List Cycle/",
            "text": "141. Linked List Cycle\n\n\nGiven a linked list, determine if it has a cycle in it.\n\n\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n\n\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n         Set<ListNode>  set =new HashSet<>();\n         while(head != null) {\n             if(set.contains(head))\n                 return true;\n             else \n                 set.add(head);\n             head = head.next; //\u9700\u8981\u6ce8\u610f\u662f\uff0c\u6b64\u64cd\u4f5c\u4f1a\u6539\u53d8head\u91cc\u7684\u5143\u7d20?\n         }\n         return false;\n    }\n}",
            "title": "Linked List Cycle"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Merge Two Sorted Lists/",
            "text": "21. Merge Two Sorted Lists\n\n\nMerge two sorted linked lists and return it as a new list. \nThe new list should be made by splicing together the nodes of the first two lists.\n\n\n//\u5229\u7528\u9012\u5f52\n\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode head;\n        if(l1 == null)\n            return l2;\n        if(l2 == null)\n            return l1;\n        if(l1.val < l2.val){\n            head = l1;\n            head.next = mergeTwoLists(l1.next,l2);\n        }else{\n            head = l2;\n            head.next = mergeTwoLists(l1,l2.next);\n        }\n        return head;\n    }\n}",
            "title": "Merge Two Sorted Lists"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Palindrome Linked List/",
            "text": "234. Palindrome Linked List\n\n\nGiven a singly linked list, determine if it is a palindrome.\n\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\uff1b\u5efa\u7acb\u6808\u6765\u5b9e\u73b0\n\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        ListNode he = head;\n        LinkedList<Integer> palindrome = new LinkedList<>();\n        while(head != null){\n            palindrome.push(head.val);\n            head = head.next;\n        }\n        while(he != null && ! palindrome.isEmpty()){\n            if(he.val != palindrome.pop())\n                return false;\n            he = he.next;\n        }\n        return true;\n    }\n}",
            "title": "Palindrome Linked List"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Remove Duplicates from Sorted List/",
            "text": "83. Remove Duplicates from Sorted List\n\n\nGiven a sorted linked list, delete all duplicates such that each element appear only once.\nFor example,\nGiven 1->1->2, return 1->2.\nGiven 1->1->2->3->3, return 1->2->3.\n\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode list = head;\n        /*\n        \u6b64\u65f6list\u5bf9\u8c61\u76f8\u5f53\u4e8ehead\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u6539\u53d8list\u6307\u9488\u4f1a\u6539\u53d8head\uff0c\n        \u56e0\u4e3a\u5b83\u4eec\u6307\u9488\u662f\u540c\u4e00\u4e2a\uff0c\u800c\u6539\u53d8val\u5219\u4e0d\u4f1a\u6539\u53d8head\n        */\n        while(list != null && list.next != null){\n            if(list.next.val == list.val)\n                list.next =list.next.next;//\u76f8\u5e94\u7684\u4f1a\u6539\u53d8head\n            else\n                list = list.next;   //\u4e0d\u4f1a\u6539\u53d8head,\u4f46\u4f1a\u6539\u53d8list\uff0c\u7528\u4e00\u6b21\u51cf\u5c11\u4e00\u4e2a\u5143\u7d20\n        }\n        return head; //\u6240\u4ee5return list \u662f\u9519\u8bef\u7684\n    }\n}\n\n/*\nArrayList<Integer> arrayList =new ArrayList<>();\n    for (int i = 0; i < 5; i++) {\n        arrayList.add(i);\n    }\n\n    ArrayList<Integer> bArrayList =arrayList;\n    System.out.println(bArrayList);\n    bArrayList.add(5);\n    System.out.println(arrayList);\n    System.out.println(bArrayList);\n*/",
            "title": "Remove Duplicates from Sorted List"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Remove Linked List Elements/",
            "text": "203. Remove Linked List Elements\n\n\nRemove all elements from a linked list of integers that have value val.\nExample\nGiven: 1 --> 2 --> 6 --> 3 --> 4 --> 5 --> 6, val = 6\nReturn: 1 --> 2 --> 3 --> 4 --> 5\n\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        while (head != null && head.val == val) head = head.next;//\u53bb\u9664\u5934\u5143\u7d20\u4e3aval\u7684\n        ListNode curr = head;\n        while (curr != null && curr.next != null)\n            if (curr.next.val == val) \n                curr.next = curr.next.next;\n        // \u6ce8\u610f\uff0c\u5fc5\u987b\u8981\u6709else\uff0c\u4e0d\u7136curr\u5c31\u53d8\u7b2c\u4e8c\u4e2a\u20182\u2019\uff1b \u4f8b\u5b50\uff1a [1,2,2,1]\n            else \n                curr = curr.next;  //\u76f8\u5f53\u4e8e\u6307\u9488\u7684\u79fb\u52a8\n        return head;\n    }\n}",
            "title": "Remove Linked List Elements"
        },
        {
            "location": "/\u7ebf\u6027\u8868/Reverse Linked List/",
            "text": "206. Reverse Linked List\n\n\nReverse a singly linked list.\n\n\n\u601d\u8def\n\uff1a\n        \u5c06head\u5143\u7d20\u91cc\u7684\u5404\u4e2a\u6307\u9488\u65b9\u5411\u8bbe\u4e3a\u76f8\u53cd\u53cd\u5411\uff0c\n        \u7136\u540e\u518d\u8ba9pre\u6307\u5411head\u6700\u540e\u4e00\u4e2a\u6307\u9488\u5c31\u884c\n\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode pre = null;\n        ListNode cur = head;\n        //\u901a\u8fc7\u6539\u53d8\u6307\u9488\u6307\u5411\n        while(cur != null ){\n            ListNode nexttemp = cur.next;\n            cur.next = pre;\n            pre = cur; //\u66f4\u65b0pre\u6307\u5411cur\n            cur = nexttemp; //\u66f4\u65b0cur\n        }\n        return pre;\n    //\u4e3a\u4ec0\u4e48\u5728\u8fd9return cur/head \u7ed3\u679c\u4e0d\u4e00\u6837\uff1a\u56e0\u4e3ahead\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u800ccur\u6307\u5411\u6700\u540e\u4e00\u4e2a\n    }\n}\n\n\n\n\u518d\u6765\u4e2a\u9012\u5f52\u7b97\u6cd5\n\n\n\u9012\u5f52\u7248\u672c\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u5173\u952e\u662f\u5411\u540e\u9000\u3002\u5047\u8bbe\u5217\u8868\u7684\u5176\u4f59\u90e8\u5206\u5df2\u7ecf\u88ab\u98a0\u5012\u4e86\uff0c\u73b0\u5728\u5982\u4f55\u626d\u8f6c\u524d\u9762\u90e8\u5206\uff1f\n\u6211\u4eec\u5047\u8bbe\u5217\u8868\u662f\uff1an 1 \u2192...\u2192n k-1 \u2192n k \u2192n k + 1 \u2192...\u2192n m \u2192\u00d8\n\u4ece\u8282\u70b9n k + 1\u5230n m\u7684\u5047\u8bbe\u5df2\u7ecf\u88ab\u53cd\u8f6c\uff0c\u5e76\u4e14\u5728\u8282\u70b9n k\u5904\u3002\nn 1 \u2192...\u2192n k-1 \u2192 n k \u2192n k + 1 \u2190...\u2190n m\n\u6211\u4eec\u5e0c\u671bn k + 1\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411n k\u3002\n\u6240\u4ee5\uff0cn k .next.next = n k ;\n\u8981\u5c0f\u5fc3\uff0cn 1\u7684\u4e0b\u4e00\u4e2a\u5fc5\u987b\u6307\u5411\u00d8\u3002\u5982\u679c\u60a8\u5fd8\u8bb0\u4e86\u8fd9\u4e00\u70b9\uff0c\u60a8\u7684\u94fe\u63a5\u5217\u8868\u5c31\u4f1a\u6709\u4e00\u4e2a\u5faa\u73af\u3002\n\n\n//C++\nListNode* reverseList(ListNode* head) {\n    if (head == null || head->next == null) return head;\n    ListNode* p = reverseList(head->next);\n    head->next->next = head;\n    head->next = null;\n    return p;\n}\n\n//Java\u5b9e\u73b0\npublic ListNode reverseList(ListNode head) {\n    if (head == null || head.next == null) return head;\n    ListNode p = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    return p;\n}",
            "title": "Reverse Linked List"
        },
        {
            "location": "/School/FJ\u7684\u5b57\u7b26\u4e32/",
            "text": "1053: FJ\u7684\u5b57\u7b26\u4e32\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nFJ\u5728\u6c99\u76d8\u4e0a\u5199\u4e86\u8fd9\u6837\u4e00\u4e9b\u5b57\u7b26\u4e32\uff1a\n\n\nA1  =  \u201cA\u201d\n\n\nA2  =  \u201cABA\u201d\n\n\nA3  =  \u201cABACABA\u201d\n\n\nA4  =  \u201cABACABADABACABA\u201d\n\n\n\u2026  \u2026\n\n\n\u4f60\u80fd\u627e\u51fa\u5176\u4e2d\u7684\u89c4\u5f8b\u5e76\u5199\u6240\u6709\u7684\u6570\u5217AN\u5417\uff1f\n\n\n#include<iostream>  \n#include<string>  \nusing namespace std;  \nstring cal(int n){  \n    if(n==1)  \n        return \"A\";  \n    else  \n        return cal(n-1)+(char)('A'+n-1)+cal(n-1);  \n}  \nint main(){  \n    int n;  \n    cin>>n;  \n    cout<<cal(n);  \n    cout<<endl;  \n    return 0;  \n}",
            "title": "FJ\u7684\u5b57\u7b26\u4e32"
        },
        {
            "location": "/School/Huffuman\u6811/",
            "text": "1054: Huffuman\u6811\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nHuffman\u6811\u5728\u7f16\u7801\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5173\u5fc3Huffman\u6811\u7684\u6784\u9020\u8fc7\u7a0b\u3002\n\n\n\u7ed9\u51fa\u4e00\u5217\u6570{pi}={p0,  p1,  \u2026,  pn-1}\uff0c\u7528\u8fd9\u5217\u6570\u6784\u9020Huffman\u6811\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n\n1.  \u627e\u5230{pi}\u4e2d\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\uff0c\u8bbe\u4e3apa\u548cpb\uff0c\u5c06pa\u548cpb\u4ece{pi}\u4e2d\u5220\u9664\u6389\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u7684\u548c\u52a0\u5165\u5230{pi}\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8d39\u7528\u8bb0\u4e3apa  +  pb\u3002\n\n\n2.  \u91cd\u590d\u6b65\u9aa41\uff0c\u76f4\u5230{pi}\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u3002\n\n\n\u5728\u4e0a\u9762\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u628a\u6240\u6709\u7684\u8d39\u7528\u76f8\u52a0\uff0c\u5c31\u5f97\u5230\u4e86\u6784\u9020Huffman\u6811\u7684\u603b\u8d39\u7528\u3002\n\n\n\u672c\u9898\u4efb\u52a1\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6570\u5217\uff0c\u73b0\u5728\u8bf7\u4f60\u6c42\u51fa\u7528\u8be5\u6570\u5217\u6784\u9020Huffman\u6811\u7684\u603b\u8d39\u7528\u3002\n\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6570\u5217{pi}={5,  3,  8,  2,  9}\uff0cHuffman\u6811\u7684\u6784\u9020\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n\n1.  \u627e\u5230{5,  3,  8,  2,  9}\u4e2d\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u662f2\u548c3\uff0c\u4ece{pi}\u4e2d\u5220\u9664\u5b83\u4eec\u5e76\u5c06\u548c5\u52a0\u5165\uff0c\u5f97\u5230{5,  8,  9,  5}\uff0c\u8d39\u7528\u4e3a5\u3002\n\n\n2.  \u627e\u5230{5,  8,  9,  5}\u4e2d\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u662f5\u548c5\uff0c\u4ece{pi}\u4e2d\u5220\u9664\u5b83\u4eec\u5e76\u5c06\u548c10\u52a0\u5165\uff0c\u5f97\u5230{8,  9,  10}\uff0c\u8d39\u7528\u4e3a10\u3002\n\n\n3.  \u627e\u5230{8,  9,  10}\u4e2d\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u662f8\u548c9\uff0c\u4ece{pi}\u4e2d\u5220\u9664\u5b83\u4eec\u5e76\u5c06\u548c17\u52a0\u5165\uff0c\u5f97\u5230{10,  17}\uff0c\u8d39\u7528\u4e3a17\u3002\n\n\n4.  \u627e\u5230{10,  17}\u4e2d\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u662f10\u548c17\uff0c\u4ece{pi}\u4e2d\u5220\u9664\u5b83\u4eec\u5e76\u5c06\u548c27\u52a0\u5165\uff0c\u5f97\u5230{27}\uff0c\u8d39\u7528\u4e3a27\u3002\n\n\n5.  \u73b0\u5728\uff0c\u6570\u5217\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u657027\uff0c\u6784\u9020\u8fc7\u7a0b\u7ed3\u675f\uff0c\u603b\u8d39\u7528\u4e3a5+10+17+27=59\u3002\n\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    static void Huffman(int pi[],int num){\n        int count=0;\n        int sum[]= new int[num-1];\n        int he=0;\n        while(count < (num-1)){\n            Arrays.sort(pi,0,num-count);\n            pi[0]=pi[0]+pi[1];\n            sum[count]=pi[0];\n            count++;\n\n            for(int i=1;i<num-count;++i)\n                pi[i] = pi[i+1];\n        }\n        for(int i=0;i<num-1;++i)\n            he = he+sum[i];\n        System.out.println(he);\n    }\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        int n;\n\n        while(in.hasNext()){\n\n            n=in.nextInt();\n            int pi[]=new int[n];\n            for(int i=0;i<n;++i)\n                pi[i]=in.nextInt();\n\n            Huffman(pi,n);\n        }\n\n    }\n}",
            "title": "Huffuman\u6811"
        },
        {
            "location": "/School/Nanae\u753b\u753b/",
            "text": "1318: Nanae\u753b\u753b\uff082014\u5e74ACM\u6821\u8d5b\u521d\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\nNanae\u5c0f\u7684\u65f6\u5019\u5f88\u559c\u6b22\u753b\u753b\uff0c\u4e00\u5929\u4ed6\u7684\u670b\u53cb\u8ba9\u4ed6\u753b\u4e2a\u77e9\u5f62\u51fa\u6765\uff0c\u7ed9\u4e86\u77e9\u5f62\u7684\u5bbd\u548c\u9ad8\u4e86\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\u6bcf\u4e2a\u6837\u4f8b\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0c\n\u5206\u522b\u4e3a\u5bbd\u5ea6(w)\u548c\u9ad8\u5ea6(h),0<w,h<75;\n\n\n\u8f93\u51fa\n\n\n\u6bcf\u4e2a\u8f93\u5165\u4e00\u4e2a\u6837\u4f8b\uff0c\u6bcf\u4e2a\u6837\u4f8b\u3002\u753b\u51fa\u77e9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n3 2\n3 3\n\u6837\u4f8b\u8f93\u51fa\n+---+\n|   |\n|   |\n+---+\n+---+\n|   |\n|   |\n|   |\n+---+\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int w = in.nextInt();\n            int h = in.nextInt();\n            //\n            for (int i = 0; i < h+2; i++) {\n                for (int j = 0; j < w+2; j++) {\n                    if((i==0 || i==h+1) &&(j==0 || j ==w+1)) {\n                        System.out.print(\"+\");\n                    }\n                    else if ((i==0||i==h+1) && j!=0 && j !=w+1) {\n                        System.out.print(\"-\");\n                    }\n                    else if (i!=0 && i!=h+1 &&(j==0 || j ==w+1)) {\n                        System.out.print(\"|\");\n                    }\n                    else if (i!=0 && j!=0 && j !=w+1 && i!=h+1) {\n                        System.out.print(\" \");\n                    }\n                    if (j==w+1) {\n                        System.out.println();\n                    }\n                }\n            }\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "Nanae\u753b\u753b"
        },
        {
            "location": "/School/OJ_c++\u5e38\u7528/",
            "text": "#include<iostream>\n#include<stdio.h>\n//#include<stdlib.h>\n//#include<string.h>\n//#include<string>\n//#include<math.h>\n#include<algorithm>\n//#define inttochar(x) ('0'+x)\n//#define chartoint(x) (x-'0')\n//#include<stack>\n//#include<queue>\n#include<vector>\nusing namespace std;\nbool comp(int &a,int &b){\n  return a>b;\n}\nint main()\n{\n\n  return 0;\n}\n\n\n//\u83b7\u53d6\u4e00\u6574\u884c\uff1a\n        string s;\n        getline(cin,s);\n\n//\u83b7\u53d6\u672a\u77e5\u4e2a\u6570\n        while(scanf(\"&d\",&n)!=EOF)\n//pow\u548csqrt\u5728math\u5e93\u4e2d\n\nchar -> int\n    #define chartoint(x) (x-'0')\n    cout<<chartonumber(c)+1;\nint -> char\n    #define inttochar(x) ('0'+x)\n    cout<<(char)inttochar(2);\n//\u521d\u59cb\u5316\u6570\u7ec4B\u4e3a0 or -1\nmemset(B,0,sizeof(B));\n//\u5b57\u6bcd\u5927\u5c0f\u5199\u8f6c\u6362\ncout<<(char)toupper('a'); A\ncout<<(char)tolower('A'); a\n\n//\u5934\u6587\u4ef6\n\n#include<iostream>\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<string>\n#include<math.h>\n#include<algorithm>\n  //\u5012\u5e8f\n  bool comp(int &a,int &b){\n  return a>b;\n  }\n  sort(a,a+5,comp);\n#define inttochar(x) ('0'+x)\n#define chartoint(x) (x-'0')\n#include<queue>// \u961f\u5217\n#include<stack>//\u6808\nusing namespace std;\n\n//\u5b9a\u4e49\u65b9\u5f0f\n\nstack<int>  s;\nqueue<int>  q;\n\n//\u6808\uff1a\ns.empty()//\u5982\u679c\u6808\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse  \ns.size()//\u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u7684\u4e2a\u6570  \ns.pop()//\u5220\u9664\u6808\u9876\u5143\u7d20\u4f46\u4e0d\u8fd4\u56de\u5176\u503c  \ns.top()//\u8fd4\u56de\u6808\u9876\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u5220\u9664\u8be5\u5143\u7d20  \ns.push(X)//\u5728\u6808\u9876\u538b\u5165\u65b0\u5143\u7d20 \uff0c\u53c2\u6570X\u4e3a\u8981\u538b\u5165\u7684\u5143\u7d20\n\nstack<int> s;\ns.push(1);\ncout<<s.top();\ns.pop();\nif(s.empty())\ncout<<1;\n\n//\u961f\u5217\uff1a\nq.empty()// \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse  \nq.size() // \u8fd4\u56de\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570  \nq.pop()  //\u5220\u9664\u961f\u5217\u9996\u5143\u7d20\u4f46\u4e0d\u8fd4\u56de\u5176\u503c  \nq.front()  // \u8fd4\u56de\u961f\u9996\u5143\u7d20\u7684\u503c\uff0c\u4f46\u4e0d\u5220\u9664\u8be5\u5143\u7d20  \nq.push(X) //\u5728\u961f\u5c3e\u538b\u5165\u65b0\u5143\u7d20 \uff0cX\u4e3a\u8981\u538b\u5165\u7684\u5143\u7d20\nq.back() //\u8fd4\u56de\u961f\u5217\u5c3e\u5143\u7d20\u7684\u503c\uff0c\u4f46\u4e0d\u5220\u9664\u8be5\u5143\u7d20  \n\n queue<int> q;\n q.push(1);\n q.push(2);\n cout<<q.back();\n\n#include <vector>\n\nvector<int> a ;  //\u58f0\u660e\u4e00\u4e2aint\u578b\u5411\u91cfa\nvector<int> a(10) ;  //\u58f0\u660e\u4e00\u4e2a\u521d\u59cb\u5927\u5c0f\u4e3a10\u7684\u5411\u91cf\nvector<int> a(10, 1) ; //\u58f0\u660e\u4e00\u4e2a\u521d\u59cb\u5927\u5c0f\u4e3a10\u4e14\u521d\u59cb\u503c\u90fd\u4e3a1\u7684\u5411\u91cf\nvector<int> b(a) ; //\u58f0\u660e\u5e76\u7528\u5411\u91cfa\u521d\u59cb\u5316\u5411\u91cfb\nvector<int> b(a.begin(), a.begin()+3) ; //\u5c06a\u5411\u91cf\u4e2d\u4ece\u7b2c0\u4e2a\u5230\u7b2c2\u4e2a(\u51713\u4e2a)\u4f5c\u4e3a\u5411\u91cfb\u7684\u521d\u59cb\u503c\n\n// \u9664\u6b64\u4e4b\u5916, \u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u6765\u521d\u59cb\u5316\u5411\u91cf:\nint n[] = {1, 2, 3, 4, 5} ;\nvector<int> a(n, n+5) ;  //\u5c06\u6570\u7ec4n\u7684\u524d5\u4e2a\u5143\u7d20\u4f5c\u4e3a\u5411\u91cfa\u7684\u521d\u503c\n\n\u5143\u7d20\u7684\u8f93\u5165\u548c\u8bbf\u95ee\u53ef\u4ee5\u50cf\u64cd\u4f5c\u666e\u901a\u7684\u6570\u7ec4\u90a3\u6837, \u7528cin>>\u8fdb\u884c\u8f93\u5165,\ncout<<a[n]\u8fd9\u6837\u8fdb\u884c\u8f93\u51fa:\n\n\u5c3e\u63d2\u5143\u7d20\uff1a V.push_back(a[i]);\n\u63d2\u5165\u5143\u7d20\uff1a  V.insert(V.begin()+i,a); //\u5728\u7b2ci+1\u4e2a\u5143\u7d20\u524d\u9762\u63d2\u5165a\n\u5220\u9664\u5143\u7d20\uff1avec.erase(vec.begin()+i); //\u5220\u9664\u7b2ci+1\u4e2a\u5143\u7d20\n\u6c42vector\u7684\u957f\u5ea6\uff1aV.size();\na.empty() //\u5224\u65ad\u5411\u91cf\u662f\u5426\u4e3a\u7a7a\n\u4ea4\u6362 - swap\n        b.swap(a) ;//a\u5411\u91cf\u4e0eb\u5411\u91cf\u8fdb\u884c\u4ea4\u6362\nsort(V.begin(),V.end());//\u6392\u5e8f\u65b9\u6cd5\n\nvector<int> a;\n  int value;\n  while(scanf(\"%d\",&value)){\n    if(value==-1)\n      break;\n    a.insert(a.begin(),value);\n  }\n  //\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff0c\u65e2\u53ef\u4ee5\u50cf\u6570\u7ec4\u4e00\u6837\n  for(int i=0;i<a.size();++i){\n    if(i==3)\n      a[i]=3;\n  }\n  vector<int>::iterator it;\n  for(it=a.begin();it!=a.end();it++){\n    cout<<*it<<endl;\n  }\n\n\n//\u4e8c\u7ef4\u5411\u91cf\nvector< vector<int> > b(10, vector<int>(5));\n //\u521b\u5efa\u4e00\u4e2a10*5\u7684int\u578b\u4e8c\u7ef4\u5411\u91cf\nvector< vector<int> > b(10, vector<int>(5, 0)) ;\n   //\u5bf9\u90e8\u5206\u6570\u636e\u8fdb\u884c\u8f93\u5165\n  cin>>b[1][1] ;\n  cin>>b[2][2] ;\n  cin>>b[3][3];\n\n   //\u5168\u90e8\u8f93\u51fa\n   int m, n ;\n   for(m=0; m<b.size(); m++)           //b.size()\u83b7\u53d6\u884c\u5411\u91cf\u7684\u5927\u5c0f\n   {\n       for(n=0; n<b[m].size(); n++)    //\u83b7\u53d6\u5411\u91cf\u4e2d\u5177\u4f53\u6bcf\u4e2a\u5411\u91cf\u7684\u5927\u5c0f\n           cout<<b[m][n]<<\" \" ;\n       cout<<\"\\n\" ;\n  }",
            "title": "OJ c++\u5e38\u7528"
        },
        {
            "location": "/School/Sec_Wed\u548cRache/",
            "text": "1319: Sec_Wed\u548cRache\uff082014\u5e74ACM\u6821\u8d5b\u521d\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\nRache\u4ed6\u7a81\u7136\u95f4\u60f3\u7ecf\u5546\uff0c\u4ed6\u6536\u8d2d\u4e00\u4e9b\u8d27\u7269\uff0c\u6bcf\u4ef6\u8d27\u7269\u90fd\u6709\u4ef7\u503c\u548c\u4fdd\u8d28\u671f\uff0c\u6bcf\u5929\u53ef\u4ee5\u5356\u4e00\u4ef6\u8d27\u7269\uff0c\u505a\u4e3aACMer\u7684\u4ed6\uff0c\u8981\u505a\u51fa\u4e00\u4e2a\u7a0b\u5e8f\u51fa\u6765\uff0c\u7b97\u51fa\u4ed6\u8fd9\u4e9b\u8d27\u7269\u5356\u51fa\u7684\u6700\u5927\u4ef7\u503c\u7684\u5566\u3002\n\n\n\u5176\u4e2dpi\u4e3a\u8d27\u7269\u7684\u4ef7\u503c\uff0cdi\u4e3a\u8d27\u7269\u7684\u4fdd\u8d28\u671f\u3002\n\n\n\u6bd4\u5982Rache\u62e5\u6709\u8d27\u7269=={a,b,c,d}\uff0c\u548c(pa,da)=(50,2), (pb,db)=(10,1),\n (pc,dc)=(20,2), and (pd,dd)=(30,1)\uff0c\u5982\u56fe\u6240\u4ee5\u662f\u8fd9\u4e9b\u8d27\u7269\u6240\u6709\u53ef\u80fd\u7684\u51fa\u552e\u8ba1\u5212\uff0c\n \u8d27\u7269b\u548cd\u90fd\u662f\u4e00\u5929\uff0c\u6240\u4ee5Rache\u53ea\u80fd\u7b2c\u4e00\u5929\u5356d\u8d27\u7269\uff0c\u7136\u540e\u7b2c\u4e8c\u5929\u53ea\u80fd\u9009\u53d6a\u8d27\u7269\uff0c\u6240\u4ee5Rache\u5f97\u523080\u5143\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\u7b2c\u4e00\u884c\u8f93\u51650 <= n <= 10000\uff08\u8868\u793a\u6709N\u4ef6\u8d27\u7269\uff09\uff0c\u7d27\u63a5\u7740\u662f\u8d27\u7269\u7684\u4ef7\u503c\u548c\u8fd9\u8d27\u7269\u7684\u4fdd\u8d28\u671f\u3002\n\n\n1 <= pi <= 10000 and 1 <= di <= 10000\u3002\n\n\n\u8f93\u51fa\n\n\n\u6bcf\u4e2a\u6837\u4f8b\u8f93\u51fa\u4e00\u884c\uff0c\u8f93\u51fa\u6700\u5927\u83b7\u5f97\u5229\u6da6\u503c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n4  50 2  10 1   20 2   30 1\n7  20 1   2 1   10 3  100 2   8 2 5 20  50 10\n\u6837\u4f8b\u8f93\u51fa\n80\n185\n\n\n\n\n\u601d\u8def\uff1a\n\n    \u8d27\u7269\u4fdd\u8d28\u671f\u8d8a\u5c0f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u7ea7\u4e0b\uff0c\n    \u53d6\u8d27\u7269\u4ef7\u503c\u6700\u9ad8\u7684\uff0c\u76f4\u81f3\u904d\u5386\u5b8c\u5c31\u662f\u6700\u5927\u4ef7\u503c\n\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int n = in.nextInt();\n            int [][]num = new int[n][2];\n            int di[] = new int[n];\n            int k=0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < 2; j++) {\n                    num[i][j] = in.nextInt();\n                    if (j==1) {\n                        di[k++] = num[i][j];\n                    }\n                }\n            }\n        //\n            Arrays.sort(di);\n            int temp=0,sum=0,value=0;\n            for (int i = 0; i < di.length; i++) {\n                if(di[i] <= temp) {\n                    continue;\n                }\n                temp = di[i];\n                for (int j = 0; j < n; j++) {\n                    if(num[j][1]==temp && num[j][0]>value) {\n                        value = num[j][0];\n                    }\n                }\n                sum+=value;\n                value=0;\n            }\n        System.out.println(sum);\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "Sec Wed\u548cRache"
        },
        {
            "location": "/School/Torry\u7684\u56f0\u60d1/",
            "text": "1078: Torry\u7684\u56f0\u60d1(\u63d0\u9ad8\u578b)\n\n\n\u9898\u76ee\u63cf\u8ff0\n\u7b97\u6cd5\u63d0\u9ad8  Torry\u7684\u56f0\u60d1(\u63d0\u9ad8\u578b)  \n\n\u65f6\u95f4\u9650\u5236\uff1a1.0s     \u5185\u5b58\u9650\u5236\uff1a512.0MB\n\n\n\u95ee\u9898\u63cf\u8ff0\n\u3000\u3000Torry\u4ece\u5c0f\u559c\u7231\u6570\u5b66\u3002\u4e00\u5929\uff0c\u8001\u5e08\u544a\u8bc9\u4ed6\uff0c  \u50cf2\u30013\u30015\u30017\u2026\u2026\u8fd9\u6837\u7684\u6570\u53eb\u505a\u8d28\u6570\u3002\nTorry\u7a81\u7136\u60f3\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u524d10\u3001100\u30011000\u300110000\u2026\u2026\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\u662f\u591a\u5c11\u5462\uff1f\n\u4ed6\u628a\u8fd9\u4e2a\u95ee\u9898\u544a\u8bc9  \u8001\u5e08\u3002\u8001\u5e08\u6123\u4f4f\u4e86\uff0c\u4e00\u65f6\u56de\u7b54\u4e0d\u51fa\u6765\u3002\u4e8e\u662fTorry\u6c42\u52a9\u4e8e\u4f1a\u7f16\u7a0b\u7684\u4f60\uff0c\n\u8bf7\u4f60\u7b97\u51fa\u524dn\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\u3002\u4e0d\u8fc7\uff0c\u8003\u8651\u5230\u4f60\u624d\u63a5\u89e6\u7f16\u7a0b\u4e0d\u4e45\uff0cTorry\u53ea\u8981\u4f60\u7b97\u51fa\u8fd9\u4e2a\u6570\u6a21\u4e0a50000\u7684\u503c\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u4ec5\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u5176\u4e2dn< =100000\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u4e00\u884c\uff0c\u5373\u524dn\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\u6a2150000\u7684\u503c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n1\n\n\u6837\u4f8b\u8f93\u51fa\n2\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a;\n        while(in.hasNext()) {\n            a=in.nextInt();\n            int n=1500000;\n            boolean []isPrime =new boolean[n];\n            for (int i = 2; i < n; ++i) {\n              isPrime[i]=true;\n            }\n\n            //\u6392\u96642,3\u7b49\u7d20\u6570\u7684\u500d\u6570\uff0c\u5269\u4f59\u7684true\u5c31\u662f\u7d20\u6570\n            for (int i = 2; i * i < n; i++) {\n                  if (!isPrime[i]) continue;\n                  for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                  }\n               }\n            int count=0;\n            long sum=1;\n            for (int i = 2; i < n; i++)\n                if (isPrime[i]) {\n                    sum = (sum * i) %50000;\n\n                    count++;\n                    if (count==a)\n                        break;\n                }\n\n            System.out.println(sum);\n        }\n    }\n}",
            "title": "Torry\u7684\u56f0\u60d1"
        },
        {
            "location": "/School/n\u7687\u540e\u95ee\u9898/",
            "text": "1314: n\u7687\u540e\u95ee\u9898\uff082013\u5e74\u6821\u8d5b\u51b3\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\nN\u7687\u540e\u95ee\u9898\u76f8\u4fe1\u5927\u5bb6\u90fd\u65e9\u5c31\u542c\u8fc7\uff0c\u5c31\u662f\u6c42\u4e00\u4e2an\nn\u7684\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u4e2d\uff0c\u653en\u4e2a\u7687\u540e\uff0c\u8ba9\u6bcf\u4e2a\u7687\u540e\u4e0d\u4e92\u76f8\u653b\u51fb\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u7b26\u5408\u8981\u6c42\u653e\u7f6e\u65b9\u6cd5\u3002\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u7687\u540e\u53ef\u4ee5\u653b\u51fb\u540c\u4e00\u884c\uff0c\u540c\u4e00\u5217\u548c\u540c\u4e00\u659c\u7ebf\u4e0a\u7684\u68cb\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6c42\u7684\u662fn\nn\u7684\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\u4e2d\uff0c\u4efb\u4f55\u4e24\u4e2a\u7687\u540e\u4e0d\u653e\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\u3002\n\n\n\u8fd9\u6b21\u6211\u4eec\u52a0\u591a\u4e00\u4e2a\u6761\u4ef6\uff1a\u89c4\u5b9a\u4e86\u68cb\u76d8\u4e0a\u67d0\u4e9b\u683c\u5b50\u4e0d\u80fd\u653e\u7687\u540e\u3002\n\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u7b26\u5408\u8981\u6c42\u7684\u653e\u7f6e\u65b9\u6cd5\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6837\u4f8b\u7684\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6570\u5b57n\u548ck(4<=n<=10, 0 <= k <= n*n)\uff0c\u63a5\u4e0b\u6765\u4f1a\u8ddf\u7740k\u884c\u8f93\u5165\uff0c\u6bcf\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570(x,y)\u8868\u793a\u4e0d\u80fd\u653e\u68cb\u5b50\u7684\u4f4d\u7f6e\uff08X\uff0cY\u5750\u6807\u90fd\u662f\u4ece1\u5f00\u59cb\uff0c\u4ee5\u6700\u5de6\u4e0a\u89d2\u7684\u683c\u5b50\u5750\u6807\u4e3a\uff081,1\uff09\u4e3a\u6807\u51c6)\u3002\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\uff0c\u8f93\u51fa\u7b26\u5408\u8981\u6c42\u7684\u653e\u7f6e\u65b9\u6cd5\u6570\u91cf\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n4 0\n4 1\n2 1\n\u6837\u4f8b\u8f93\u51fa\n2\n1\n\n\n\n\n#include<iostream>\n#include<vector>\nusing namespace std;\n\nint count = 0;\nint isCorrect(int n,int m,int i, int j, vector<vector<int> > Q,vector<vector<int> > Else)\n{\n    int s, t;\n    for(s=i,t=0; t<n; t++)\n        if(Q[s][t]==1 && t!=j)\n            return 0;//\u5224\u65ad\u884c\n    for(t=j,s=0; s<n; s++)\n        if(Q[s][t]==1 && s!=i)\n            return 0;//\u5224\u65ad\u5217\n    for(s=i-1,t=j-1; s>=0&&t>=0; s--,t--)\n        if(Q[s][t]==1)\n            return 0;//\u5224\u65ad\u5de6\u4e0a\u65b9\n    for(s=i+1,t=j+1; s<n&&t<n;s++,t++)\n        if(Q[s][t]==1)\n            return 0;//\u5224\u65ad\u53f3\u4e0b\u65b9\n    for(s=i-1,t=j+1; s>=0&&t<n; s--,t++)\n        if(Q[s][t]==1)\n            return 0;//\u5224\u65ad\u53f3\u4e0a\u65b9\n    for(s=i+1,t=j-1; s<n&&t>=0; s++,t--)\n        if(Q[s][t]==1)\n            return 0;//\u5224\u65ad\u5de6\u4e0b\u65b9\n        //\u6392\u9664\u7279\u5b9a\u60c5\u51b5\n        for (int s = 0; s < m; ++s)\n        {\n                if(Else[s][0]==i && Else[s][1]==j)\n                    return 0;\n        }\n\n    return 1;//\u5426\u5219\u8fd4\u56de\n}\n\nvoid Queue(int n,int m,int j, vector<vector<int> > Q,vector<vector<int> > Else)\n{\n    int i,k;\n    if(j==n){//\u9012\u5f52\u7ed3\u675f\u6761\u4ef6\n//        for(i=0; i<n; i++){\n//                //\u5f97\u5230\u4e00\u4e2a\u89e3\uff0c\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\n//            for(k=0; k<n; k++)\n//                printf(\"%d \", Q[i][k]);\n//            printf(\"\\n\");\n//        }\n//        printf(\"\\n\");\n        count++;\n        return ;\n    }\n    for(i=0; i<n; i++){\n        if(isCorrect(n,m,i, j, Q,Else)){//\u5982\u679cQ[i][j]\u53ef\u4ee5\u653e\u7f6e\u7687\u540e\n            Q[i][j]=1;//\u653e\u7f6e\u7687\u540e\n            Queue(n,m,j+1, Q,Else);//\u9012\u5f52\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u7a7a\u95f4\u6811\n            Q[i][j]=0;//\u8fd9\u53e5\u4ee3\u7801\u5c31\u662f\u5b9e\u73b0\u56de\u6eaf\u5230\u4e0a\u4e00\u5c42\n        }\n    }\n}\n\nint main()\n{\n    int n,k;\n    while(cin>>n>>k){\n                vector<vector<int> > Else(k,vector<int>(2));\n                for (int i = 0; i < k; ++i)\n                {\n                        for (int j = 0; j < 2; ++j)\n                        {\n                                cin>>Else[i][j];\n                                Else[i][j] -= 1;\n                        }\n                }\n        vector<vector<int> > Q(n,vector<int>(n,0));\n       // Q[1][0]=1;\n        Queue(n,k,0, Q,Else);\n                cout<<count<<endl;\n                count=0;\n\n    }\n    return 0;\n}",
            "title": "N\u7687\u540e\u95ee\u9898"
        },
        {
            "location": "/School/\u4ea4\u6362Easy/",
            "text": "1084: \u4ea4\u6362Easy\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u7ed9\u5b9aN\u4e2a\u6574\u6570\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u4ea4\u6362\u5f53\u524d\u7b2cx\u4e2a\u4e0e\u7b2cy\u4e2a\u6574\u6570\uff0c\u8981\u6c42\u8f93\u51fa\u6700\u7ec8\u7684\u5e8f\u5217\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u7b2c\u4e00\u884c\u4e3a\u5e8f\u5217\u7684\u5927\u5c0fN(1< =N< =1000)\u548c\u64cd\u4f5c\u4e2a\u6570M(1< =M< =1000)\u3002\n\u3000\u3000\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u521d\u59cb\u5e8f\u5217\u3002\n\u3000\u3000\u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x,y  (1< =x,y< =N)\uff0c\u8868\u793a\u8981\u4ea4\u6362\u7684\u4e24\u4e2a\u6574\u6570\u3002\u5728\u4e00\u6b21\u4ea4\u6362\u4e2d\uff0c\u5982\u679cx\u548cy\u76f8\u7b49\uff0c\u5219\u4e0d\u4f1a\u6539\u53d8\u5e8f\u5217\u7684\u5185\u5bb9\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51faN\u884c\uff0c\u4e3a\u4ea4\u6362\u540e\u7684\u5e8f\u5217\u4e2d\u7684\u6570\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n5  2\n1  2  3  4  5\n1  2\n3  4\n\u6837\u4f8b\u8f93\u51fa\n2\n1\n4\n3\n5\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out() {\n        Scanner in = new Scanner(System.in);\n        int n,m;\n        while(in.hasNext()) {\n            n = in.nextInt();\n            m = in.nextInt();\n            int []a = new int[n+1];\n            for (int i = 1; i < a.length; i++) {\n                a[i] = in.nextInt();\n            }\n            int []b = new int[m*2];\n            for (int i = 0; i < b.length; i++) {\n                b[i] = in.nextInt();\n            }\n\n            //\n            for (int i = 0; i < b.length; i+=2) {\n                //\u4ea4\u6362\n                int temp;\n                temp = a[b[i]];\n                a[b[i]] = a[b[i+1]];\n                a[b[i+1]] = temp;\n            }\n\n            //\u8f93\u51fa\n            for (int i = 1; i < a.length; i++) {\n                System.out.println(a[i]);\n            }\n        }\n    }\n    public static void main(String[] args) {\n        out();\n    }\n}",
            "title": "\u4ea4\u6362Easy"
        },
        {
            "location": "/School/\u5206\u89e3\u8d28\u56e0\u6570/",
            "text": "1056: \u5206\u89e3\u8d28\u56e0\u6570\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u6c42\u51fa\u533a\u95f4[a,b]\u4e2d\u6240\u6709\u6574\u6570\u7684\u8d28\u56e0\u6570\u5206\u89e3\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u4e24\u4e2a\u6574\u6570a\uff0cb\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6570\u7684\u5206\u89e3\uff0c\u5f62\u5982k=a1\na2\na3...(a1< =a2< =a3...\uff0ck\u4e5f\u662f\u4ece\u5c0f\u5230\u5927\u7684)(\u5177\u4f53\u53ef\u770b\u6837\u4f8b)\n\n\n\u6837\u4f8b\u8f93\u5165\n3  10\n\u6837\u4f8b\u8f93\u51fa\n3=3\n4=2*2\n5=5\n6=2*3\n7=7\n8=2*2*2\n9=3*3\n10=2*5\n\n\n\n\n\u63d0\u793a:\u5148\u7b5b\u51fa\u6240\u6709\u7d20\u6570\uff0c\u7136\u540e\u518d\u5206\u89e3\u3002\n\u6570\u636e\u89c4\u6a21\u548c\u7ea6\u5b9a:2< =a< =b< =10000\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(int n) {\n        System.out.print(n+\"=\");\n        int n2=n;\n        for(int i = 2;i*i<=n2;i++)       \n        {        \n            while(n2%i==0)\n            {\n                System.out.print(i);\n                n2=n2/i;\n                if(n2!=1)\n                    System.out.print(\"*\");\n            }\n        }\n\n        if(n2 != 1)   System.out.print(n2);      //\u5f53n\u4e3a\u8d28\u6570\n\n    }\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a,b;\n        while(in.hasNext()) {\n            a = in.nextInt();\n            b = in.nextInt();\n            for (; a <= b; a++) {\n                out(a);\n                System.out.println();\n            }       \n        }\n    }\n}",
            "title": "\u5206\u89e3\u8d28\u56e0\u6570"
        },
        {
            "location": "/School/\u5355\u8bcd\u4e2a\u6570\u7edf\u8ba1/",
            "text": "1098: \u5355\u8bcd\u4e2a\u6570\u7edf\u8ba1\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u4e0d\u8d85\u8fc780\uff09\uff0c\u7136\u540e\u7edf\u8ba1\u51fa\u8be5\u5b57\u7b26\u4e32\u5f53\u4e2d\u5305\u542b\n\u591a\u5c11\u4e2a\u5355\u8bcd\u3002\u4f8b\u5982\uff1a\u5b57\u7b26\u4e32\u201cthis  is  a  book\u201d\u5f53\u4e2d\u5305\u542b\u67094\u4e2a\u5355\u8bcd\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\n\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7531\u82e5\u5e72\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u5355\u8bcd\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\n\n\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u5355\u8bcd\u7684\u4e2a\u6570\u3002\n\n\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b:\n\u3000\u3000\u7528\u6237\u8f93\u5165\u6570\u636e\u6837\u4f8b\uff1a\n\u3000\u3000this  is  a  book\n\u3000\u3000\u7cfb\u7edf\u8f93\u51fa\u6570\u636e\u5982\u4e0b\uff1a\n\u3000\u30004\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String a;\n        while(in.hasNext()) {\n            a=in.nextLine();\n            char sum[] = a.toCharArray();\n            int count=1;\n            for (int i = 0; i < sum.length; i++)\n                if(sum[i]==' ')\n                    count++;\n            System.out.println(count);\n        }\n    }\n}",
            "title": "\u5355\u8bcd\u4e2a\u6570\u7edf\u8ba1"
        },
        {
            "location": "/School/\u56de\u5f62\u53d6\u6570/",
            "text": "1057: \u56de\u5f62\u53d6\u6570\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u56de\u5f62\u53d6\u6570\u5c31\u662f\u6cbf\u77e9\u9635\u7684\u8fb9\u53d6\u6570\uff0c\u82e5\u5f53\u524d\u65b9\u5411\u4e0a\u65e0\u6570\u53ef\u53d6\u6216\u5df2\u7ecf\u53d6\u8fc7\uff0c\u5219\u5de6\u8f6c90\u5ea6\u3002\u4e00\u5f00\u59cb\u4f4d\u4e8e\u77e9\u9635\u5de6\u4e0a\u89d2\uff0c\u65b9\u5411\u5411\u4e0b\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u4e0d\u8d85\u8fc7200\u7684\u6b63\u6574\u6570m,  n\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u548c\u5217\u3002\u63a5\u4e0b\u6765m\u884c\u6bcf\u884cn\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u77e9\u9635\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u5171mn\u4e2a\u6570\uff0c\u4e3a\u8f93\u5165\u77e9\u9635\u56de\u5f62\u53d6\u6570\u5f97\u5230\u7684\u7ed3\u679c\u3002\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u884c\u672b\u4e0d\u8981\u6709\u591a\u4f59\u7684\u7a7a\u683c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n\n3  3\n\n1  2  3\n\n4  5  6\n\n7  8  9\n\n\u6837\u4f8b\u8f93\u51fa\n\n1  4  7  8  9  6  3  2  5\n\n\u6837\u4f8b\u8f93\u5165\n\n3  2\n\n1  2\n\n3  4\n\n5  6\n\n\u6837\u4f8b\u8f93\u51fa\n\n1  3  5  6  4  2\n\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int m,n;\n        while(in.hasNext()) {\n            m=in.nextInt();\n            n=in.nextInt();\n            int [][]a=new int[m][n];\n            for (int i = 0; i < m; i++)\n                for (int j = 0; j < n; j++)\n                    a[i][j]=in.nextInt();\n            //print\n            int t=0,count=0;\n            while(count<m*n) {\n            for (int i = 0; i < m; i++)\n                if(a[i][t]!=-1) {\n                    System.out.print(a[i][t]+\" \");\n                    count++;\n                    a[i][t]=-1;\n                }\n\n            for (int i = 0; i < n; i++)\n                if (a[m-t-1][i]!=-1) {\n                    System.out.print(a[m-t-1][i]+\" \");\n                    count++;\n                    a[m-t-1][i]=-1;\n                }\n            for (int i = m-1; i >= 0; i--)\n                if(a[i][n-t-1]!=-1) {\n                    System.out.print(a[i][n-t-1]+\" \");\n                    count++;\n                    a[i][n-t-1]=-1;\n                }\n            for (int i = n-1; i >= 0; i--)\n                if (a[t][i]!=-1) {\n                    System.out.print(a[t][i]+\" \");\n                    count++;\n                    a[t][i]=-1;\n                }\n            t++;\n            }\n            System.out.println();\n        }\n    }\n\n}",
            "title": "\u56de\u5f62\u53d6\u6570"
        },
        {
            "location": "/School/\u56f4\u5708\u5708\u6e38\u620f/",
            "text": "1310: \u56f4\u5708\u5708\u6e38\u620f\uff082013\u5e74\u6821\u8d5b\u521d\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\nSec\u53c2\u52a0\u4e86\u4e00\u4e2a\u6d3b\u52a8\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u6e38\u620f\uff0c\u8ba9n\u4e2a\u540c\u5b66\u90fd\u56f4\u6210\u4e00\u4e2a\u5708\u5708\u3002\u7136\u540e\u8ba9\u7f16\u53f7\u4e3a1\u7684\u540c\u5b66\u5f00\u59cb\u4ece1\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u5230m\u7684\u90a3\u4e2a\u540c\u5b66\u5c31\u88ab\u6dd8\u6c70\uff0c\u91cd\u65b0\u8ba9\u5269\u4e0bn-1\u4e2a\u540c\u5b66\u7ee7\u7eed\u6e38\u620f\uff0c\u63a5\u7740\u8ba9\u88ab\u6dd8\u6c70\u7684\u90a3\u4e2a\u540c\u5b66\u7684\u4e0b\u4e00\u4e2a\u540c\u5b66\u91cd\u65b0\u4ece1\u5f00\u59cb\u62a5\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u4eba\uff0c\u90a3\u4e2a\u4eba\u5c31\u662f\u80dc\u5229\u8005\u3002\n\n\nSec\u5e0c\u671b\u8d62\u5f97\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u4f46\u4e0d\u77e5\u9053\u5e94\u8be5\u7ad9\u5728\u7f16\u53f7\u662f\u591a\u5c11\u7684\u4f4d\u7f6e\uff0c\u5e0c\u671b\u4f60\u6765\u5e2e\u4ed6\u9009\u4e00\u4e2a\u7f16\u53f7\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4ee4Sec\u53d6\u5f97\u8fd9\u4e2a\u6e38\u620f\u7684\u80dc\u5229\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\n\n\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u5305\u542b2\u4e2a\u6574\u6570n\u548cm( 2<=n<=10^6 , 1<=m<=10^6)\n\n\n\u8f93\u51fa\n\n\n\u6bcf\u8f93\u5165\u4e00\u4e2a\u6837\u4f8b\uff0c\u7a0b\u5e8f\u7acb\u5373\u8f93\u51fa\u8be5\u6837\u4f8b\u7684\u7b54\u6848\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5360\u4e00\u884c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n3 2\n3 5\n10 4\n\u6837\u4f8b\u8f93\u51fa\n3\n1\n5\n\n\n\n\n//\u5efa\u7acb\u6570\u7ec4\u66b4\u529b\u89e3\u51b3\uff0c\u8d85\u65f6\nint main()\n{\n  int n,m;\n  while(scanf(\"%d%d\",&n,&m)!=EOF){\n\n    int a[n+1];\n    for (int i = 1; i <= n; ++i)\n    {\n      a[i]=i;\n    }\n    int step=1;\n    int i=1;\n    int count=0;\n    int value=m;\n    while(i<n+1){\n      if(value>(n-count))\n        m=value%(n-count);\n      if(m==0)\n        m=n-count;\n      if(step==m){\n        a[i]=0;\n        step=0;\n        count++;\n      }\n\n      i++;\n      if(i==n+1)\n        i=1;\n      if(a[i]!=0)\n      {\n        step++;\n      }\n      if(count==(n-1))\n        break;\n    }\n    for (int i = 1; i <= n; ++i)\n    {\n      if(a[i]!=0)\n      {\n        printf(\"%d\\n\", a[i]);\n        break;\n      }\n    }\n  }\n  return 0;\n}\n\n//\u6539\u8fdb\uff0c\u5229\u7528\u987a\u5e8f\u8868\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n\nint main()\n{\n  int n,m;\n  while(scanf(\"%d%d\",&n,&m)!=EOF){\n    vector<int> v;\n    for (int i = 1; i <= n; ++i)\n    {\n      v.push_back(i);\n    }\n    int value=m;\n    while(v.size()>1){\n       if(value>v.size())\n        m=value%v.size();\n      if(m==0)\n        m=v.size();\n      v.erase(v.begin()+m-1);\n    }\n    printf(\"%d\\n\", v[0]);\n  }\n  return 0;\n}",
            "title": "\u56f4\u5708\u5708\u6e38\u620f"
        },
        {
            "location": "/School/\u5b57\u7b26\u4e32\u5bf9\u6bd4/",
            "text": "1058: \u5b57\u7b26\u4e32\u5bf9\u6bd4\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u7ed9\u5b9a\u4e24\u4e2a\u4ec5\u7531\u5927\u5199\u5b57\u6bcd\u6216\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32(\u957f\u5ea6\u4ecb\u4e8e1\u523010\u4e4b\u95f4)\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u4ee5\u4e0b4\u4e2d\u60c5\u51b5\u4e4b\u4e00\uff1a\n\n\n1\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u7b49\u3002\u6bd4\u5982  Beijing  \u548c  Hebei\n\n\n2\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4ec5\u957f\u5ea6\u76f8\u7b49\uff0c\u800c\u4e14\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u5b8c\u5168\u4e00\u81f4(\u533a\u5206\u5927\u5c0f\u5199)\uff0c\u6bd4\u5982  Beijing  \u548c  Beijing\n\n\n3\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u76f8\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u4ec5\u5728\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u8fbe\u5230\u5b8c\u5168\u4e00\u81f4\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5e76\u4e0d\u6ee1\u8db3\u60c5\u51b52\uff09\u3002\u6bd4\u5982  beijing  \u548c  BEIjing\n\n\n4\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u4f46\u662f\u5373\u4f7f\u662f\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u4e5f\u4e0d\u80fd\u4f7f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e00\u81f4\u3002\u6bd4\u5982  Beijing  \u548c  Nanjing\n\n\n\u7f16\u7a0b\u5224\u65ad\u8f93\u5165\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5173\u7cfb\u5c5e\u4e8e\u8fd9\u56db\u7c7b\u4e2d\u7684\u54ea\u4e00\u7c7b\uff0c\u7ed9\u51fa\u6240\u5c5e\u7684\u7c7b\u7684\u7f16\u53f7\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u5305\u62ec\u4e24\u884c\uff0c\u6bcf\u884c\u90fd\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u4ec5\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u660e\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5173\u7cfb\u7f16\u53f7\n\n\n\u6837\u4f8b\u8f93\u5165\n\nBEIjing\n\nbeiJing  \n\n\u6837\u4f8b\u8f93\u51fa\n\n3\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    //1058: \u5b57\u7b26\u4e32\u5bf9\u6bd4\n    static int wd(String a,String b) {\n        if (a.length()!=b.length())\n            return 1;\n        else {\n            if (a.equals(b))\n                return 2;\n            if (a.toLowerCase().equals(b.toLowerCase()))\n                return 3;\n            else\n                return 4;\n        }\n\n    }\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String a,b;\n        while(in.hasNext()) {\n            a=in.next();\n            b=in.next();\n            System.out.println(wd(a, b));\n        }\n    }\n}",
            "title": "\u5b57\u7b26\u4e32\u5bf9\u6bd4"
        },
        {
            "location": "/School/\u5b8c\u7f8e\u7684\u4ee3\u4ef7/",
            "text": "1059: \u5b8c\u7f8e\u7684\u4ee3\u4ef7\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u56de\u6587\u4e32\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u4ece\u5de6\u5f80\u53f3\u8bfb\u548c\u4ece\u53f3\u5f80\u5de6\u8bfb\u662f\u4e00\u6837\u7684\u3002\u5c0f\u9f99\u9f99\u8ba4\u4e3a\u56de\u6587\u4e32\u624d\u662f\u5b8c\u7f8e\u7684\u3002\n\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u4e32\uff0c\u5b83\u4e0d\u4e00\u5b9a\u662f\u56de\u6587\u7684\uff0c\u8bf7\u4f60\u8ba1\u7b97\u6700\u5c11\u7684\u4ea4\u6362\u6b21\u6570\u4f7f\u5f97\u8be5\u4e32\u53d8\u6210\u4e00\u4e2a\u5b8c\u7f8e\u7684\u56de\u6587\u4e32\u3002\n\u4ea4\u6362\u7684\u5b9a\u4e49\u662f\uff1a\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u5b57\u7b26\n\n\n\n\u4f8b\u5982mamad\n\n\n\u7b2c\u4e00\u6b21\u4ea4\u6362  ad  :  mamda\n\n\n\u7b2c\u4e8c\u6b21\u4ea4\u6362  md  :  madma\n\n\n\u7b2c\u4e09\u6b21\u4ea4\u6362  ma  :  madam  (\u56de\u6587\uff01\u5b8c\u7f8e\uff01)\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u63a5\u4e0b\u6765\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6(N  < =  8000)\n\n\n\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e3aN.\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u5982\u679c\u53ef\u80fd\uff0c\u8f93\u51fa\u6700\u5c11\u7684\u4ea4\u6362\u6b21\u6570\u3002\n\n\n\u5426\u5219\u8f93\u51faImpossible\n\n\n\u6837\u4f8b\u8f93\u5165\n5\nmamad\n\n\u6837\u4f8b\u8f93\u51fa\n3\n\n\n\n\n\u601d\u8def\uff1a\n\n        \u5206\u4e3a\u5355\u5b57\u7b26\u65f6\u8981\u600e\u4e48\u5904\u7406\uff0c\u4ee5\u53ca\u5176\u4ed6\u60c5\u51b5\u5904\u7406\uff1b\n        \u5355\u5b57\u7b26\u65f6\uff1a\u5982\u679cn%2==0\u5219impossible\uff0c\u5426\u5219step += n/2 - i\n        \u5076\u6570\u65f6\uff1astep += j-t;\u5e76\u79fb\u52a8\u5143\u7d20\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static int Num(char a[],int n) {\n        //\u5f00\u59cb\n        int t;  \n        int j=n-1;  \n        int flag=0,step=0;  \n        for(int i=0;i<j;i++){  \n            t=j;  \n            //\u67e5\u627e\u5339\u914d\u7684\u5b57\u7b26   \n            while(a[i]!=a[t])\n                t--;  \n\n\n            if(i==t){   //\u5982\u679c\u4e3a\u5355\u4e2a\u5b57\u7b26   \n                flag++;  \n                if(n%2==0||flag>1){  \n                    System.out.println(\"Impossible\");  \n                    return 0;  \n                }  \n                step += n/2-i;  \n\n                continue;   //\u5982\u679c\u4e0d\u52a0\u8be5\u8bed\u53e5,\u5219\u5355\u4e2a\u5b57\u7b26\u4e5f\u4f1a\u6267\u884c\u4e0b\u9762\u7684if\u8bed\u53e5a[i]==a[t] && t==i   \n            }  \n            //\u5982\u679c\u627e\u5230\u76f8\u5339\u914d\u7684\u4e24\u4e2a\u6570   \n            if(i != t){  \n\n                step+=j-t;  \n                char temp=a[t];  \n                for(int l=t;l<j  \n                ;l++){  \n                    a[l]=a[l+1];  \n                }  \n                a[j]=temp;  \n                j--;  \n            }  \n        }     \n\n       System.out.println(step);\n\n        return 0;  \n    }\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n;\n        String s;\n        while(in.hasNext()) {\n            n=in.nextInt();\n            s=in.next();\n            char a[]=s.toCharArray();\n            Num(a,n);\n        }\n    }\n}",
            "title": "\u5b8c\u7f8e\u7684\u4ee3\u4ef7"
        },
        {
            "location": "/School/\u62a5\u65f6\u52a9\u624b/",
            "text": "1060: \u62a5\u65f6\u52a9\u624b\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u7ed9\u5b9a\u5f53\u524d\u7684\u65f6\u95f4\uff0c\u8bf7\u7528\u82f1\u6587\u7684\u8bfb\u6cd5\u5c06\u5b83\u8bfb\u51fa\u6765\u3002\n\u3000\u3000\u65f6\u95f4\u7528\u65f6h\u548c\u5206m\u8868\u793a\uff0c\u5728\u82f1\u6587\u7684\u8bfb\u6cd5\u4e2d\uff0c\u8bfb\u4e00\u4e2a\u65f6\u95f4\u7684\u65b9\u6cd5\u662f\uff1a\n\u3000\u3000\u5982\u679cm\u4e3a0\uff0c\u5219\u5c06\u65f6\u8bfb\u51fa\u6765\uff0c\u7136\u540e\u52a0\u4e0a\u201co'clock\u201d\uff0c\u59823:00\u8bfb\u4f5c\u201cthree  o'clock\u201d\u3002\n\u3000\u3000\u5982\u679cm\u4e0d\u4e3a0\uff0c\u5219\u5c06\u65f6\u8bfb\u51fa\u6765\uff0c\u7136\u540e\u5c06\u5206\u8bfb\u51fa\u6765\uff0c\u59825:30\u8bfb\u4f5c\u201cfive  thirty\u201d\u3002\n\u3000\u3000\u65f6\u548c\u5206\u7684\u8bfb\u6cd5\u4f7f\u7528\u7684\u662f\u82f1\u6587\u6570\u5b57\u7684\u8bfb\u6cd5\uff0c\u5176\u4e2d0~20\u8bfb\u4f5c\uff1a\n\n\n0:zero,  1:  one,  2:two,  3:three,  4:four,  5:five,\n6:six,  7:seven,  8:eight,  9:nine,  10:ten,  11:eleven,\n12:twelve,  13:thirteen,  14:fourteen,  15:fifteen,  16:sixteen,\n17:seventeen, 18:eighteen,  19:nineteen,  20:twenty\n\n\n\n\n30\u8bfb\u4f5cthirty\uff0c40\u8bfb\u4f5cforty\uff0c50\u8bfb\u4f5cfifty\u3002\n\u5bf9\u4e8e\u5927\u4e8e20\u5c0f\u4e8e60\u7684\u6570\u5b57\uff0c\u9996\u5148\u8bfb\u6574\u5341\u7684\u6570\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u4e2a\u4f4d\u6570\u3002\u598231\u9996\u5148\u8bfb30\u518d\u52a01\u7684\u8bfb\u6cd5\uff0c\u8bfb\u4f5c\u201cthirty  one\u201d\u3002\n\u6309\u4e0a\u9762\u7684\u89c4\u521921:54\u8bfb\u4f5c\u201ctwenty  one  fifty  four\u201d\uff0c9:07\u8bfb\u4f5c\u201cnine  seven\u201d\uff0c0:15\u8bfb\u4f5c\u201czero  fifteen\u201d\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u5305\u542b\u4e24\u4e2a\u975e\u8d1f\u6574\u6570h\u548cm\uff0c\u8868\u793a\u65f6\u95f4\u7684\u65f6\u548c\u5206\u3002\u975e\u96f6\u7684\u6570\u5b57\u524d\u6ca1\u6709\u524d\u5bfc0\u3002h\u5c0f\u4e8e24\uff0cm\u5c0f\u4e8e60\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u65f6\u95f4\u65f6\u523b\u7684\u82f1\u6587\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n\n0  15\n\n\u6837\u4f8b\u8f93\u51fa\n\nzero  fifteen\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void iTime(int a,int b) {\n        String []S1 = {\"zero\",\"one\",\"two\", \"three\", \"four\", \"five\", \"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\n                \"twelve\",\"thirteen\",\"fourteen\",\"fifteen\", \"sixteen\", \"seventeen\",\"eighteen\", \"nineteen\",\"twenty\"};\n        String []S2 = {\"\",\"\",\"twenty\",\"thirty\",\"forty\",\"fifty\"};\n        if (b==0) {\n            if (a<=20) {\n                System.out.println(S1[a]+\" o'clock\");\n            }else {\n                char []ch = Integer.toString(a).toCharArray();\n                int status = Integer.parseInt(ch[1]+\"\");\n                System.out.println(\"twenty \"+S1[status]+\" o'clock\");\n            }\n        }else {\n            if (a<=20) {\n                System.out.print(S1[a]+\" \");\n            }else {\n                char []ch = Integer.toString(a).toCharArray();\n                int status = Integer.parseInt(ch[1]+\"\");\n                System.out.print(\"twenty \"+S1[status]+\" \");\n            }\n\n            if (b<=20) {\n                System.out.println(S1[b]);\n            }else {\n                char []ch = Integer.toString(b).toCharArray();\n                int status1 = Integer.parseInt(ch[0]+\"\");\n                int status2 = Integer.parseInt(ch[1]+\"\");\n                System.out.println(S2[status1]+\" \"+S1[status2]);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a,b;\n        while(in.hasNext()) {\n            a = in.nextInt();\n            b = in.nextInt();\n            iTime(a,b);\n        }\n    }\n\n}",
            "title": "\u62a5\u65f6\u52a9\u624b"
        },
        {
            "location": "/School/\u6392\u961f\u6253\u6c34\u95ee\u9898/",
            "text": "1120: \u6392\u961f\u6253\u6c34\u95ee\u9898\n\n\n\u9898\u76ee\u63cf\u8ff0\n\u7b97\u6cd5\u63d0\u9ad8  \u6392\u961f\u6253\u6c34\u95ee\u9898  \n\n\u65f6\u95f4\u9650\u5236\uff1a1.0s     \u5185\u5b58\u9650\u5236\uff1a256.0MB\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u6709n\u4e2a\u4eba\u6392\u961f\u5230r\u4e2a\u6c34\u9f99\u5934\u53bb\u6253\u6c34\uff0c\u4ed6\u4eec\u88c5\u6ee1\u6c34\u6876\u7684\u65f6\u95f4t1\u3001t2\u2026\u2026\u2026..tn\u4e3a\u6574\u6570\u4e14\u5404\u4e0d\u76f8\u7b49\uff0c\u5e94\u5982\u4f55\u5b89\u6392\u4ed6\u4eec\u7684\u6253\u6c34\u987a\u5e8f\u624d\u80fd\u4f7f\u4ed6\u4eec\u603b\u5171\u82b1\u8d39\u7684\u65f6\u95f4\u6700\u5c11\uff1f\n\u8f93\u5165\u683c\u5f0f\n\u3000\u3000\u7b2c\u4e00\u884cn\uff0cr  (n< =500,r< =75)\n\u3000\u3000\u7b2c\u4e8c\u884c\u4e3an\u4e2a\u4eba\u6253\u6c34\u6240\u7528\u7684\u65f6\u95f4Ti  (Ti< =100)\uff1b\n\u8f93\u51fa\u683c\u5f0f\n\u3000\u3000\u6700\u5c11\u7684\u82b1\u8d39\u65f6\u95f4\n\n\n\u6837\u4f8b\u8f93\u5165\n3  2\n1  2  3\n\u6837\u4f8b\u8f93\u51fa\n7\n\n\n\n\n#include<iostream>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\n//\u88c5\u6ee1\u65f6\u95f4\u6700\u5c11\u7684\u6700\u5148\u6392,\u603b\u65f6\u95f4sum\u7b49\u4e8ea[i]+d(\u7b49\u5f85\u65f6\u95f4)\nint main()\n{\n  int n,r;\n  while(cin>>n>>r){\n    int a[n];//n\u4e2a\u4eba\u7684\u88c5\u6c34\u65f6\u95f4\n    int d[r];//\u7b49\u5f85\u65f6\u95f4\n    int sum=0;//\u603b\u5171\u65f6\u95f4\n    for (int i = 0; i < n; ++i)\n    {\n        cin>>a[i];\n    }\n    sort(a,a+n);\n    memset(d,0,sizeof(d));\n\n    for (int i = 0; i < n; ++i)\n    {\n        sort(d,d+r);\n        sum += d[0]+a[i];\n        d[0]+=a[i];\n    }\n    cout<<sum<<endl;\n  }\n  return 0;\n}",
            "title": "\u6392\u961f\u6253\u6c34\u95ee\u9898"
        },
        {
            "location": "/School/\u642c\u7bb1\u5b50/",
            "text": "1307: \u642c\u7bb1\u5b50\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u642c\u8fd0\u516c\u53f8\u8981\u5c06\u4e00\u5806\u7eb8\u76ae\u7bb1\u5b50\u4eceXXX\u516c\u53f8\u7684\u697c\u4f4e\u642c\u5230\u697c\u4e0a\uff0c\u4f46\u662f\u642c\u7bb1\u5b50\u7684\u4eba\u624b\u6709\u9650\uff0c\u4e00\u4e2a\u4eba\u540c\u65f6\u53ea\u80fd\u62ff\u4e00\u4e2a\u7bb1\u5b50\u3002\u4f46Sec\u60f3\u5230\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u8ba9\u4ed6\u4eec\u628a\u5c0f\u7bb1\u5b50\u88c5\u5230\u5927\u7bb1\u5b50\u91cc\u9762\uff0c\u5373\u4f53\u79ef\u5c0f\u7bb1\u5b50\u80fd\u88c5\u5230\u4f53\u79ef\u5927\u7684\u7bb1\u5b50\u4e2d\uff08\u4f53\u79ef\u76f8\u540c\u4e0d\u80fd\u4e92\u88c5\uff09\uff0c\u8fd9\u6837\u5c31\u80fd\u8282\u7701\u5f88\u591a\u4eba\u624b\u3002\u4f8b\uff1a\u6709\u4e09\u4e2a\u7bb1\u5b50\u4f53\u79ef\u5206\u522b\u662f1,2,3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4f53\u79ef1\u7684\u7bb1\u5b50\u88c5\u5230\u4f53\u79ef2\u7684\u7bb1\u5b50\u4e2d\uff0c\u518d\u8ba9\u4f53\u79ef2\u7684\u7bb1\u5b50\u88c5\u5230\u4f53\u79ef3\u7684\u7bb1\u5b50\u4e2d\uff0c\u8fd9\u6837\u53ea\u7528\u4e00\u4e2a\u4eba\u5c31\u80fd\u628a\u4f53\u79ef3\u7684\u7bb1\u5b50\u642c\u4e0a\u53bb\uff0c\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7bb1\u5b50\u642c\u4e0a\u53bb\u4e86\u3002\n\n\n\u73b0\u5728\u7ed9\u51fan\u4e2a\u7bb1\u5b50\u548c\u6bcf\u4e2a\u7bb1\u5b50\u7684\u4f53\u79ef\uff0c\u95ee\u81f3\u5c11\u8981\u591a\u5c11\u4e2a\u4eba\u624d\u80fd\u628a\u6240\u6709\u7bb1\u5b50\u642c\u4e0a\u53bb\uff1f\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u5c3e\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570n ( 0 < n <= 10^3 )\uff0c\u63a5\u4e0b\u6765\u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6574\u6570xi (0< xi <= 10^3)\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u6837\u4f8b\uff0c\u7acb\u523b\u8f93\u51fa\u4ed6\u5bf9\u5e94\u7684\u7b54\u6848\u3002\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570m\uff0c\u5373\u642c\u7bb1\u5b50\u9700\u8981\u7684\u6700\u5c11\u4eba\u6570\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n5\n1 2 3 1 2\n6\n1 4 5 6 2 3\n5\n1 1 1 1 1\n\u6837\u4f8b\u8f93\u51fa\n2\n1\n5\n\n\n\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int n = in.nextInt();\n            int num[] = new int[n];\n            for (int i = 0; i < n; i++)\n                num[i] = in.nextInt();\n            //\u5f00\u59cb\n            int temp;\n            int len = 0,count=0;\n            while(len < n) {\n                Arrays.sort(num);\n//\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u8d4b\u4e88temp\u4ee5\u53ca\u8bbe\u4e3a0\n                if (num[len]==0) {\n                    len++;\n                    continue;\n                }\n                temp = num[len];\n                num[len] = 0;\n//\u904d\u5386\u540e\u9762\u5927\u4e8e\u7b2c\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u7684\u503c\uff0c\u8bbe\u4e3a0\u5e76\u66f4\u65b0temp\n                for (int i = len+1; i < num.length; i++) {\n                    if (num[i] > temp) {\n                        temp = num[i];\n                        num[i]=0;\n                        len++;\n                    }\n                }\n    //\u6bcf\u56de\u5408\u52a0\u4e00\n            count++;\n            }\n            System.out.println(count);\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "\u642c\u7bb1\u5b50"
        },
        {
            "location": "/School/\u65e5\u5b50\u8ba1\u7b97\u95ee\u9898/",
            "text": "\u65e5\u5b50\u8ba1\u7b97\u95ee\u9898\uff082013\u5e74\u6821\u8d5b\u51b3\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u95f4\uff08\u683c\u5f0f\uff1ay\u5e74m\u6708d\u65e5\uff09\u76f8\u9694\u4e86\u591a\u5c11\u5929.\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u5c3e\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u5305\u542b6\u4e2a\u6574\u6570:y1,m1,d1,y2,m2,d2\u3002\u5206\u522b\u8868\u793a\u4e24\u4e2a\u65e5\u671f\u7684\u5e74\u6708\u65e5( 0 < y1,y2 <= 10^9)\uff0c\u6bcf\u4e2a\u6574\u6570\u95f4\u4ee5\u7a7a\u683c\u9694\u5f00\u3002\u8f93\u5165\u4fdd\u8bc1\u6bcf\u4e2a\u65e5\u671f\u90fd\u662f\u6709\u6548\u3002\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\uff0c\u8f93\u51fa\u5176\u76f8\u5e94\u7684\u7b54\u6848\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n2005 12 1 2005 12 2\n2005 12 1 2005 12 31\n2004 1 1 2004 3 1\n2003 1 1 2003 3 1\n2001 1 1 2001 1 1\n\u6837\u4f8b\u8f93\u51fa\n1\n30\n60\n59\n0\n\n\n\n\n//\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\uff0c\u4f46\u662f\u65f6\u95f4\u8d85\u65f6\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out() throws ParseException {\n        Scanner in = new Scanner(System.in);\n        int d[][] = new int[2][3];\n        while(in.hasNext()) {\n            for (int i = 0; i < 2; i++) {\n                for (int j = 0; j < 3; j++) {\n                    d[i][j] = in.nextInt();\n                }\n            }\n            //\u683c\u5f0f\u5316\u65e5\u671f\n            String idate[] = {\"\",\"\"};\n            for (int i = 0; i < 2; i++) {\n                for (int j = 0; j < 3; j++) {\n                    idate[i] += Integer.toString(d[i][j]);\n                    if(j != 2)\n                        idate[i] += \"-\";\n                }\n\n            }\n            //\n            SimpleDateFormat myFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n            java.util.Date date = null;\n            java.util.Date mydate = null;\n            date= myFormat.parse(idate[0]);\n            mydate = myFormat.parse(idate[1]);\n            long day = (mydate.getTime() - date.getTime()) / (24 * 60 * 60 * 1000);   \n            System.out.println(day);\n        }\n    }\n    public static void main(String[] args) throws ParseException {\n        out();\n    }\n}",
            "title": "\u65e5\u5b50\u8ba1\u7b97\u95ee\u9898"
        },
        {
            "location": "/School/\u65f6\u95f4\u8f6c\u6362/",
            "text": "1062: \u65f6\u95f4\u8f6c\u6362\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4t\uff0c\u8981\u6c42\u7528  \u201c< H> :< M> :< S> \u201d\u7684\u683c\u5f0f\u6765\u8868\u793a\u8fd9\u4e2a\u65f6\u95f4\u3002< H> \u8868\u793a\u65f6\u95f4\uff0c< M> \u8868\u793a\u5206\u949f\uff0c  \u800c< S> \u8868\u793a\u79d2\uff0c\u5b83\u4eec\u90fd\u662f\u6574\u6570\u4e14\u6ca1\u6709\u524d\u5bfc\u7684\u201c0\u201d\u3002\u4f8b\u5982\uff0c\u82e5t=0\uff0c\u5219\u5e94\u8f93\u51fa\u662f\u201c0:0:0\u201d\uff1b\u82e5t=3661\uff0c\u5219\u8f93\u51fa\u201c1:1:1\u201d\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\u3000\u3000\u8f93\u5165\u53ea\u6709\u4e00\u884c\uff0c\u662f\u4e00\u4e2a\u6574\u6570t\uff080< =t< =86399\uff09\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\u3000\u3000\u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u662f\u4ee5\u201c< H> :< M> :< S> \u201d\u7684\u683c\u5f0f\u6240\u8868\u793a\u7684\u65f6\u95f4\uff0c\u4e0d\u5305\u62ec\u5f15\u53f7\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n0\n\n\u6837\u4f8b\u8f93\u51fa\n0:0:0\n\n\u6837\u4f8b\u8f93\u5165\n5436\n\n\u6837\u4f8b\u8f93\u51fa\n1:30:36\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void itime(int a) {\n        int h,m,s;\n        h=a/3600;\n        m=a%3600/60;\n        s=a%3600%60;\n        System.out.println(h+\":\"+m+\":\"+s);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a;\n        while(in.hasNext()) {\n            a = in.nextInt();\n            itime(a);\n        }\n    }\n}",
            "title": "\u65f6\u95f4\u8f6c\u6362"
        },
        {
            "location": "/School/\u673a\u5668\u4eba/",
            "text": "1308: \u673a\u5668\u4eba\uff082013\u5e74\u6821\u8d5b\u521d\u8d5b\uff09\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u6709\u4e00\u4e2a\u673a\u5668\u4eba\uff0c\u4ed6\u6709\u4e24\u79cd\u524d\u8fdb\u65b9\u5f0f\uff0c\u98de\u6216\u8005\u8dd1\uff0c\u5982\u679c\u662f\u8dd1\u7684\u8bdd\uff0c\u4e00\u6b21\u80fd\u591f\u8dd1a\u8ddd\u79bb\uff0c\u98de\u7684\u8bdd\u4e00\u6b21\u80fd\u591f\u98deb\u4e2a\u8ddd\u79bb\u3002\u95ee\uff0c\u7ed9\u51fa\u4e00\u6bb5\u8ddd\u79bb\uff0c\u4ed6\u80fd\u591f\u7528\u591a\u5c11\u79cd\u65b9\u5f0f\u521a\u597d\u5230\u8fbe\uff1f\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6837\u4f8b\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u5c3e\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u7b2c\u4e00\u884c\u8f93\u5165\u4e09\u4e2a\u6574\u6570N ( 0 < N <= 10^6 )\uff0ca\u548cb\uff0c\uff080<a,b\uff09\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u6837\u4f8b\uff0c\u7acb\u523b\u8f93\u51fa\u4ed6\u5bf9\u5e94\u7684\u7b54\u6848\u3002\u8f93\u51fa\u5360\u4e00\u884c\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570M\uff0c\u5373\u5b8c\u6210\u8fd9\u6bb5\u8def\u7a0b\u6709\u51e0\u79cd\u65b9\u5f0f\uff1f\u7531\u4e8e\u7ed3\u679c\u53ef\u80fd\u8fc7\u5927\uff0c\u56e0\u6b64\u53d6\u4f5910000007\u3002\u5982\u679c\u6ca1\u6709\u529e\u6cd5\u521a\u597d\u8fbe\u5230\uff0c\u5219\u8f93\u51fa0\uff1b\n\n\n\u6837\u4f8b\u8f93\u5165\n1 1 2\n6 2 3\n5 3 4\n\u6837\u4f8b\u8f93\u51fa\n1\n2\n0\n\n\n\n\n//\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\uff0c\u4f46\u662f\u65f6\u95f4\u8d85\u9650\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int n=in.nextInt();\n            int a=in.nextInt();\n            int b=in.nextInt();\n            //\n            int count=0;\n            for (int i = 0; i < n/b+2; i++) {\n                for (int j = 0; j < n/a+2; j++) {\n                    if (a*j+i*b == n) {\n                        count++;\n                        count = count%10000007;\n                    }\n                }\n            }\n            System.out.println(count);\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "\u673a\u5668\u4eba"
        },
        {
            "location": "/School/\u77e9\u5f62\u9762\u79ef\u4ea4/",
            "text": "1063: \u77e9\u5f62\u9762\u79ef\u4ea4\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u5e73\u9762\u4e0a\u6709\u4e24\u4e2a\u77e9\u5f62\uff0c\u5b83\u4eec\u7684\u8fb9\u5e73\u884c\u4e8e\u76f4\u89d2\u5750\u6807\u7cfb\u7684X\u8f74\u6216Y\u8f74\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u77e9\u5f62\uff0c\n    \u6211\u4eec\u7ed9\u51fa\u5b83\u7684\u4e00\u5bf9\u76f8\u5bf9\u9876\u70b9\u7684\u5750\u6807\uff0c\u8bf7\u4f60\u7f16\u7a0b\u7b97\u51fa\u4e24\u4e2a\u77e9\u5f62\u7684\u4ea4\u7684\u9762\u79ef\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u4ec5\u5305\u542b\u4e24\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u77e9\u5f62\u3002\n\n\n\u5728\u6bcf\u884c\u4e2d\uff0c\u7ed9\u51fa\u77e9\u5f62\u7684\u4e00\u5bf9\u76f8\u5bf9\u9876\u70b9\u7684\u5750\u6807\uff0c\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u90fd\u7528\u4e24\u4e2a\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc710^7\u7684\u5b9e\u6570\u8868\u793a\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u4ec5\u5305\u542b\u4e00\u4e2a\u5b9e\u6570\uff0c\u4e3a\u4ea4\u7684\u9762\u79ef\uff0c\u4fdd\u7559\u5230\u5c0f\u6570\u540e\u4e24\u4f4d\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n\n1  1  3  3\n\n2  2  4  4\n\n\u6837\u4f8b\u8f93\u51fa\n\n1.00\n\n\n\n\n//oj\u8fd0\u884c\u9519\u8bef\uff0c\u4f46\u6211\u89c9\u5f97\u662f\u5bf9\u7684\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int []a = new int[4];\n        int []b = new int[4];\n        while(in.hasNext()) {\n            for (int i = 0; i < 4; i++)\n                a[i] = in.nextInt();\n            for (int i = 0; i < 4; i++)\n                b[i] = in.nextInt();\n\n            //\u6c42\u5706\u5fc3\n            double ay[] = new double[2];\n            double by[] = new double[2];\n            ay[0] = a[0]+(a[2]-a[0])/2;\n            ay[1] = a[1]+(a[3]-a[1])/2;\n            by[0] = b[0]+(b[2]-b[0])/2;\n            by[1] = b[1]+(b[3]-b[1])/2;\n\n            //\u6c42\u534a\u5f84\n            double ra=Math.sqrt(Math.pow(ay[1]-a[1],2 )+Math.pow(ay[0]-a[0], 2));\n            double rb=Math.sqrt(Math.pow(by[1]-b[1],2 )+Math.pow(by[0]-b[0], 2));\n            //\u4e24\u70b9\u8ddd\u79bb(\u52fe\u80a1\u5b9a\u7406)\n            double l = Math.sqrt(Math.pow((by[1]-ay[1]), 2) + Math.pow((by[0]-ay[0]), 2));\n            //\u5224\u65ad\n            double s=0;\n            if (l <= rb-ra) //\u5305\u542b\n                s = (a[3]-a[1])*(a[2]-a[0]);\n\n            if(l<ra+rb && l>rb-ra)\n                s = (by[1]-ay[1])*(by[0]-ay[0]);\n\n            System.out.printf(\"%.2f\",s);\n            System.out.println();\n        }\n    }\n}",
            "title": "\u77e9\u5f62\u9762\u79ef\u4ea4"
        },
        {
            "location": "/School/\u77e9\u9635\u4e58\u6cd5/",
            "text": "1064: \u77e9\u9635\u4e58\u6cd5\n\n\n\u95ee\u9898\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2aN\u9636\u77e9\u9635A\uff0c\u8f93\u51faA\u7684M\u6b21\u5e42\uff08M\u662f\u975e\u8d1f\u6574\u6570\uff09\n\n\n\u4f8b\u5982\uff1a\n\nA  =\n\n1  2\n\n3  4\n\nA\u76842\u6b21\u5e42\n\n7  10\n\n15  22\n\n\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570N\u3001M\uff081< =N< =30,  0< =M< =5\uff09\uff0c\u8868\u793a\u77e9\u9635A\u7684\u9636\u6570\u548c\u8981\u6c42\u7684\u5e42\u6570\n\n\n\u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884cN\u4e2a\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc710\u7684\u975e\u8d1f\u6574\u6570\uff0c\u63cf\u8ff0\u77e9\u9635A\u7684\u503c\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u5171N\u884c\uff0c\u6bcf\u884cN\u4e2a\u6574\u6570\uff0c\u8868\u793aA\u7684M\u6b21\u5e42\u6240\u5bf9\u5e94\u7684\u77e9\u9635\u3002\u76f8\u90bb\u7684\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\n\n\n\u6837\u4f8b\u8f93\u5165\n\n2  2\n\n1  2\n\n3  4\n\n\u6837\u4f8b\u8f93\u51fa\n\n7  10\n\n15  22\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n,m;\n        while(in.hasNext()) {\n            //in\n            n = in.nextInt();\n            m = in.nextInt();\n            int [][]A = new int[n][n];\n            for (int i = 0; i < n; i++)\n                for (int j = 0; j < n; j++)\n                    A[i][j] = in.nextInt();\n            //deal\n            for (int i = 0; i < n && m==0; i++)\n                for (int j = 0; j < n; j++) {\n                    if (i==j)\n                        A[i][j]=1;\n                    else\n                        A[i][j]=0;\n                }\n\n            int [][]B=A;\n            int [][]C =A;\n            while(m>1) {\n                B = new int[n][n];\n                m--;\n                for (int i = 0; i < n; i++)\n                    for (int j = 0; j < n; j++) {\n                        for (int j2 = 0; j2 < n; j2++)\n                            B[i][j] += C[i][j2]*A[j2][j];\n                    }\n                C=B;\n            }\n\n            //out\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++)\n                    System.out.print(B[i][j]+\" \");\n                System.out.println();\n            }\n        }\n    }\n\n}\n//C++\n#include<iostream>\n#include<stdio.h>\n//#include<stdlib.h>\n#include<string.h>\n//#include<string>\n//#include<math.h>\n#include<algorithm>\n#define inttochar(x) ('0'+x)\n#define chartoint(x) (x-'0')\nusing namespace std;\n\nint main()\n{\n    int n,m;\n    while(cin>>n>>m){\n      int A[n][n];\n      for(int i=0;i<n;++i){\n        for(int j=0;j<n;++j){\n          cin>>A[i][j];\n        }\n      }\n     //deal\n            for (int i = 0; i < n && m==0; i++)\n                for (int j = 0; j < n; j++) {\n                    if (i==j)\n                        A[i][j]=1;\n                    else\n                        A[i][j]=0;\n                }\n\n            int B[n][n];\n            int C[n][n] ;\n            for(int i=0;i<n;++i){\n        for(int j=0;j<n;++j){\n          B[i][j] = A[i][j];\n          C[i][j] = A[i][j];\n        }\n      }\n            while(m>1) {\n        memset(B,0,sizeof(B));\n                m--;\n                for (int i = 0; i < n; i++)\n                    for (int j = 0; j < n; j++)\n                        for (int j2 = 0; j2 < n; j2++)\n                            B[i][j] += C[i][j2]*A[j2][j];\n\n                for(int i=0;i<n;++i){\n        for(int j=0;j<n;++j){\n          C[i][j] = B[i][j];\n        }\n      }\n\n    }\n\n            //out\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++)\n                    cout<<B[i][j]<<\" \";\n                cout<<endl;\n    }\n    }\n    return 0;\n}",
            "title": "\u77e9\u9635\u4e58\u6cd5"
        },
        {
            "location": "/School/\u7b80\u5355\u5bc6\u6587/",
            "text": "1304: \u7b80\u5355\u5bc6\u6587\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\nSec\u548cNanae\u5728\u6267\u884c\u4e00\u4e2a\u79d8\u5bc6\u4efb\u52a1\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u901a\u8baf\u9760\u4e00\u4e9b\u5bc6\u6587\u4f20\u8f93\uff0c\u539f\u6587\u4e0e\u5bc6\u6587\u8f6c\u6362\u89c4\u5219\u5982\u4e0b\uff1a\n\n\n\u6709\u4e00\u4e2a\u952e\u503cd\uff0c\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32(\u5b57\u7b26\u4e32\u4e2d\u53ea\u5305\u542b\u5b57\u6bcd,\u5927\u5c0f\u5199\u5747\u6709),\u53ea\u8981\u5c06\u539f\u6587\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u53d8\u4e3a\u5b83\u4eec\u672c\u8eab\u5728\u5b57\u6bcd\u8868\u4e2d\u4f4d\u7f6e\u518d\u5f80\u540e\u6570\u7b2cd\u4e2a\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u5982\uff1ad=2\u65f6\uff0cA->C,B->D,...,X->Z,Y->A,Z->B\u3002(\u5982\u679c\u5f80\u540e\u6570\u7b2cd\u4e2a\u5b57\u6bcd\u4f4d\u7f6e\u5df2\u8d85\u51fa\u5b57\u6bcd\u8868\uff0c\u5219\u56de\u5230A\u4f4d\u7f6e\u7ee7\u7eed\u6570\u3002)\u73b0\u5728\u8981\u6c42\u4f60\u8bbe\u8ba1\u7a0b\u5e8f\u3002\u5e2e\u4ed6\u4eec\u628a\u60f3\u4f20\u8fbe\u7684\u539f\u6587\u8f6c\u6362\u4e3a\u5bc6\u6587\u8fdb\u884c\u4f20\u8f93\u3002\uff08\u8f6c\u6362\u540e\u5bc6\u6587\u7684\u5b57\u6bcd\u4e0e\u539f\u6587\u7684\u5b57\u6bcd\u5927\u5c0f\u5199\u4e00\u81f4\uff09\n\n\n\u6ce8\uff1a ASCALL\u7801 \u5927\u5199\u5b57\u6bcdA-Z\u4e3a65-90;\u5c0f\u5199\u5b57\u6bcda-z\u4e3a97-122\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\u6bcf\u7ec4\u6570\u636e\u5305\u62ec\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u952e\u503cd\uff0c\uff08\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u5927\u4e8e1000\uff0c0<=d<=10^9\uff09\u5b57\u7b26\u4e32\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e0d\u5305\u62ec\u4efb\u4f55\u7b26\u53f7\u3002\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u6837\u4f8b\u8981\u76f8\u5e94\u8f93\u51fa\u5176\u7b54\u6848\uff0c\u7b54\u6848\u53ea\u5305\u542b\u5bc6\u6587\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u7b54\u6848\u5360\u4e00\u884c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\nABCxyz 2\nABC 12\nABC 26\nABC 27\n\n\u6837\u4f8b\u8f93\u51fa\nCDEzab\nMNO\nABC\nBCD\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            String s = in.next();\n            int d = in.nextInt();\n            char num[] = s.toCharArray();\n            d = d%26;\n            for (int i = 0; i < num.length; i++) {\n            //\u5904\u7406\u5927\u5199\u5b57\u6bcd\n            if ((num[i]+d) > 90 && num[i]<=90) {\n                num[i] = (char)(num[i]+d-26);\n                continue;\n            }\n            //\u5904\u7406\u5c0f\u5199\u5b57\u6bcd\n            if ((num[i]+d) > 122 && num[i]>=97) {\n                num[i] = (char)(num[i]+d-26);\n                continue;\n            }\n            num[i] = (char)(num[i]+d);\n\n            }\n\n            System.out.println(num);\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}\n\n//C++\n#include<iostream>\n//#include<stdio.h>\n//#include<stdlib.h>\n#include<string.h>\n//#include<string>\n//#include<math.h>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    int d;\n    while(cin>>s>>d){\n        char num[s.size()];\n        s.copy(num,s.size());\n        d = d%26;\n        for (int i = 0; i < sizeof(num)/sizeof(num[0]); i++) {\n        //\u5904\u7406\u5927\u5199\u5b57\u6bcd\n        if ((num[i]+d) > 90 && num[i]<=90) {\n            num[i] = (char)(num[i]+d-26);\n            continue;\n        }\n        //\u5904\u7406\u5c0f\u5199\u5b57\u6bcd\n        if ((num[i]+d) > 122 && num[i]>=97) {\n            num[i] = (char)(num[i]+d-26);\n            continue;\n        }\n        num[i] = (char)(num[i]+d);\n        }\n       for(int i=0;i<sizeof(num)/sizeof(num[0]);++i){\n         cout<<num[i];\n       }\n       cout<<endl;\n    }\n    return 0;\n}",
            "title": "\u7b80\u5355\u5bc6\u6587"
        },
        {
            "location": "/School/\u82af\u7247\u6d4b\u8bd5/",
            "text": "1065: \u82af\u7247\u6d4b\u8bd5\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u6709n\uff082\u2264n\u226420\uff09\u5757\u82af\u7247\uff0c\u6709\u597d\u6709\u574f\uff0c\u5df2\u77e5\u597d\u82af\u7247\u6bd4\u574f\u82af\u7247\u591a\u3002\n\n\n\u6bcf\u4e2a\u82af\u7247\u90fd\u80fd\u7528\u6765\u6d4b\u8bd5\u5176\u4ed6\u82af\u7247\u3002\u7528\u597d\u82af\u7247\u6d4b\u8bd5\u5176\u4ed6\u82af\u7247\u65f6\uff0c\u80fd\u6b63\u786e\u7ed9\u51fa\u88ab\u6d4b\u8bd5\u82af\u7247\u662f\u597d\u8fd8\u662f\u574f\u3002\u800c\u7528\u574f\u82af\u7247\u6d4b\u8bd5\u5176\u4ed6\u82af\u7247\u65f6\uff0c\u4f1a\u968f\u673a\u7ed9\u51fa\u597d\u6216\u662f\u574f\u7684\u6d4b\u8bd5\u7ed3\u679c\uff08\u5373\u6b64\u7ed3\u679c\u4e0e\u88ab\u6d4b\u8bd5\u82af\u7247\u5b9e\u9645\u7684\u597d\u574f\u65e0\u5173\uff09\u3002\n\n\n\u7ed9\u51fa\u6240\u6709\u82af\u7247\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u95ee\u54ea\u4e9b\u82af\u7247\u662f\u597d\u82af\u7247\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u6570\u636e\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u82af\u7247\u4e2a\u6570\u3002\n\n\n\u7b2c\u4e8c\u884c\u5230\u7b2cn+1\u884c\u4e3an*n\u7684\u4e00\u5f20\u8868\uff0c\u6bcf\u884cn\u4e2a\u6570\u636e\u3002\u8868\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u4e3a0\u62161\uff0c\u5728\u8fd9n\u884c\u4e2d\u7684\u7b2ci\u884c\u7b2cj\u5217\uff081\u2264i,  j\u2264n\uff09\u7684\u6570\u636e\u8868\u793a\u7528\u7b2ci\u5757\u82af\u7247\u6d4b\u8bd5\u7b2cj\u5757\u82af\u7247\u65f6\u5f97\u5230\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c1\u8868\u793a\u597d\uff0c0\u8868\u793a\u574f\uff0ci=j\u65f6\u4e00\u5f8b\u4e3a1\uff08\u5e76\u4e0d\u8868\u793a\u8be5\u82af\u7247\u5bf9\u672c\u8eab\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002\u82af\u7247\u4e0d\u80fd\u5bf9\u672c  \u8eab\u8fdb\u884c\u6d4b\u8bd5\uff09\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u6240\u6709\u597d\u82af\u7247\u7684\u7f16\u53f7\n\n\n\u6837\u4f8b\u8f93\u5165\n\n3\n\n1  0  1\n\n0  1  0\n\n1  0  1\n\n\u6837\u4f8b\u8f93\u51fa\n\n1  3\n\n\n\n\n\u601d\u8def\uff1a\n\n    if\u6709\u82af\u7247\u6570\u636e\u4e00\u81f4\uff0c\u5219flag++\uff0c\u4e14flag>n/2,\u8f93\u51fai\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n;\n        while(in.hasNext()) {\n            n = in.nextInt();\n            int a[][] = new int[n+1][n+1];\n\n            for (int i = 1; i < a.length; i++)\n                for (int j = 1; j < a.length; j++)\n                    a[i][j] = in.nextInt();\n\n            //\n            int flag,m;\n            for(int i = 1;i <= n;i++)  \n            {  \n                flag = 0;  \n                for(int k = 1;k <= n;k++)  \n                {  \n                    m = 0;  \n                    for(int j = 1;j <= n;j++)  \n                    {  \n                        if(a[i][j] == a[k][j])  \n                            m++;  \n                    }  \n                    if(m == n)  \n                        flag++;  \n                }  \n                if(flag > n/2)  \n                    System.out.print(i+\" \");\n            }  \n\n\n                    /*  Set<Integer> set = new HashSet<>();\n            for (int i = 0; i < a.length; i++)\n                for (int j = 0; j < a.length; j++) {\n                    if (i==j)\n                        continue;\n                    if (a[i][j] == 1 && a[j][i]==1)\n                        set.add(i);\n                }\n            for (int i = 0; i < a.length; i++) {\n                for (int j = 0; j < a.length; j++) {\n                    if (i==j)\n                        continue;\n                    if(a[i][j]==1 && set.contains(i))\n                        set.add(j);\n                }\n            }\n\n            Integer []num = new Integer[set.size()];\n            set.toArray(num);\n            for (int i = 0; i < num.length; i++)\n                System.out.print(num[i]+1+\" \");\n            System.out.println();*/\n        }\n    }\n}",
            "title": "\u82af\u7247\u6d4b\u8bd5"
        },
        {
            "location": "/School/\u8ba1\u7b97N\uff01/",
            "text": "1303: \u8ba1\u7b97N\uff01\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u5411\u8ba1\u7b97\u673a\u4e2d\u8f93\u5165N(0<=N<=10^6) ,\u5e76\u8ba1\u7b97\u5176\u9636\u4e58\uff1a\n\n\nN! = 1\n2\n3\n...\nN\n\n\n\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u6c42\u8f93\u51faN\uff01\u6c42\u4f5910000007\u7684\u503c\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\u6bcf\u4e2a\u6837\u4f8b\u4f1a\u8f93\u5165\u4e00\u4e2aN\u3002\n\n\n\u8f93\u51fa\n\n\n\u6bcf\u8f93\u5165\u4e00\u4e2a\u6837\u4f8b\uff0c\u7a0b\u5e8f\u7acb\u5373\u8f93\u51fa\u8be5\u6837\u4f8b\u7684\u7b54\u6848\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5360\u4e00\u884c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n5\n2001\n120\n\u6837\u4f8b\u8f93\u51fa\n120\n6479726\n3702033\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        int n;\n        while(in.hasNext()) {\n            n = in.nextInt();\n            long sum=1;\n            for (int i = 2; i <= n; i++) {\n                sum = sum*i%10000007;\n            }\n            System.out.println(sum);\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "\u8ba1\u7b97N\uff01"
        },
        {
            "location": "/School/\u8fdb\u5236\u8f6c\u6362\u5668/",
            "text": "1306: \u8fdb\u5236\u8f6c\u6362\u5668\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u5f88\u591a\u5730\u65b9\u8981\u7528\u5230\u8fdb\u5236\u8f6c\u6362\u3002\u4f8b\u5982\uff1a\u6211\u4eec\u8bfbIP\u5730\u5740\u4f1a\u628a\u8ba1\u7b97\u673a\u4e2d\u4e8c\u8fdb\u5236\u7684IP\u5730\u5740\u8f6c\u6210\u5341\u8fdb\u5236\uff1b\u6211\u4eec\u770b\u67d0\u4e9b\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u4f1a\u628a\u8ba1\u7b97\u673a\u4e2d\u4e8c\u8fdb\u5236\u7684\u53d8\u91cf\u5730\u5740\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u3002\n\n\n\u73b0\u5728\u8981\u6c42\u4f60\u5199\u4e00\u4e2a\u8fdb\u5236\u8f6c\u6362\u5668\uff0c\u53ef\u4ee5\u4f7f\u4e00\u4e2ad\u8fdb\u5236\u7684\u6574\u6570n\uff0c\u8f6c\u4e3at\u8fdb\u5236\u7684\u6574\u6570m\u3002\n\n\n\u5341\u8fdb\u5236\u4ee5\u4e0a\u8d85\u8fc79\u7684\u6570\u5b57\u4f9d\u6b21\u7528\u5927\u5199\u5b57\u6bcdA,B,C...\u4ee3\u66ff\u3002\n\n\n\u8f93\u5165\n\n\n\u8f93\u5165\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ee5\u5224\u65ad\u8f93\u5165\u5230\u8fbe\u6587\u4ef6\u4e3a\uff08EOF\uff09\u7ec8\u6b62\u7a0b\u5e8f\u3002\n\n\n\u6bcf\u4e2a\u6837\u4f8b\u5305\u542b\u4e09\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3an,d,t(2<= d,t <=16, n\u662f\u5341\u8fdb\u5236\u5f62\u5f0f\u4e0d\u5927\u4e8e10^9\u7684\u975e\u8d1f\u6574\u6570)\uff0c\u8f93\u5165\u6ca1\u6709\u524d\u5bfc0\u3002\n\n\n\u8f93\u51fa\n\n\n\u5bf9\u6bcf\u4e2a\u8f93\u5165\u6837\u4f8b\uff0c\u8f93\u51fa\u76f8\u5e94\u7684\u7b54\u6848m\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5360\u4e00\u884c\n\n\n\u6837\u4f8b\u8f93\u5165\n101 2 5\n123 4 16\nAB 16 10\n\u6837\u4f8b\u8f93\u51fa\n10\n1B\n171\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out(){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            String n = in.next();\n            int d = in.nextInt();\n            int t = in.nextInt();\n            char []num = n.toCharArray();\n            int []inum = new int[num.length];\n            //\u8f6c\u6362\u4e3aint\u6570\u7ec4\n            for (int i = 0; i < num.length; i++) {\n                if (num[i] >= 'A') {\n                    inum[i] = (int)num[i]-55;\n                    continue;\n                }\n                inum[i] = Integer.parseInt(num[i]+\"\");\n            }\n            //\u5f00\u59cb\u64cd\u4f5c,\u8f6c\u6362\u4e3a10\u8fdb\u5236\n            int k=0,sum=0;\n            for (int i = inum.length-1; i >= 0 ; i--) {\n                sum +=inum[i] * Math.pow(d, k++);\n            }\n            //\u8f6c\u6362\u4e3at\u8fdb\u5236\n            System.out.println(Integer.toString(sum, t).toUpperCase());\n        }\n    }\n    public static void main(String[] args){\n        out();\n    }\n}",
            "title": "\u8fdb\u5236\u8f6c\u6362\u5668"
        },
        {
            "location": "/School/\u9519\u8bef\u7968\u636e/",
            "text": "1300: \u9519\u8bef\u7968\u636e\n\n\n\u95ee\u9898\u63cf\u8ff0:\n\n\n\u67d0\u6d89\u5bc6\u5355\u4f4d\u4e0b\u53d1\u4e86\u67d0\u79cd\u7968\u636e\uff0c\u5e76\u8981\u5728\u5e74\u7ec8\u5168\u90e8\u6536\u56de\u3002\n\u6bcf\u5f20\u7968\u636e\u6709\u552f\u4e00\u7684ID\u53f7\u3002\u5168\u5e74\u6240\u6709\u7968\u636e\u7684ID\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u4f46ID\u7684\u5f00\u59cb\u6570\u7801\u662f\u968f\u673a\u9009\u5b9a\u7684\u3002\n\u56e0\u4e3a\u5de5\u4f5c\u4eba\u5458\u758f\u5ffd\uff0c\u5728\u5f55\u5165ID\u53f7\u7684\u65f6\u5019\u53d1\u751f\u4e86\u4e00\u5904\u9519\u8bef\uff0c\u9020\u6210\u4e86\u67d0\u4e2aID\u65ad\u53f7\uff0c\u53e6\u5916\u4e00\u4e2aID\u91cd\u53f7\u3002\n\u4f60\u7684\u4efb\u52a1\u662f\u901a\u8fc7\u7f16\u7a0b\uff0c\u627e\u51fa\u65ad\u53f7\u7684ID\u548c\u91cd\u53f7\u7684ID\u3002\u5047\u8bbe\u65ad\u53f7\u4e0d\u53ef\u80fd\u53d1\u751f\u5728\u6700\u5927\u548c\u6700\u5c0f\u53f7\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8981\u6c42\u7a0b\u5e8f\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u6574\u6570N(N< 100)\u8868\u793a\u540e\u9762\u6570\u636e\u884c\u6570\u3002\n\u63a5\u7740\u8bfb\u5165N\u884c\u6570\u636e\u3002\n\u6bcf\u884c\u6570\u636e\u957f\u5ea6\u4e0d\u7b49\uff0c\u662f\u7528\u7a7a\u683c\u5206\u5f00\u7684\u82e5\u5e72\u4e2a\uff08\u4e0d\u5927\u4e8e100\u4e2a\uff09\u6b63\u6574\u6570\uff08\u4e0d\u5927\u4e8e100000\uff09\uff0c\u8bf7\u6ce8\u610f\u884c\u5185\u548c\u884c\u672b\u53ef\u80fd\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4f60\u7684\u7a0b\u5e8f\u9700\u8981\u80fd\u5904\u7406\u8fd9\u4e9b\u7a7a\u683c\u3002\n\u6bcf\u4e2a\u6574\u6570\u4ee3\u8868\u4e00\u4e2aID\u53f7\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8981\u6c42\u7a0b\u5e8f\u8f93\u51fa1\u884c\uff0c\u542b\u4e24\u4e2a\u6574\u6570m  n\uff0c\u7528\u7a7a\u683c\u5206\u9694\u3002\n\u5176\u4e2d\uff0cm\u8868\u793a\u65ad\u53f7ID\uff0cn\u8868\u793a\u91cd\u53f7ID\n\n\n\u6837\u4f8b\u8f93\u51651\n2\n5  6  8  11  9  \n10  12  9\n\u6837\u4f8b\u8f93\u51fa1\n7  9\n\u6837\u4f8b\u8f93\u51652\n6\n164  178  108  109  180  155  141  159  104  182  179  118  137  184  115  124  125  129  168  196\n172  189  127  107  112  192  103  131  133  169  158  \n128  102  110  148  139  157  140  195  197\n185  152  135  106  123  173  122  136  174  191  145  116  151  143  175  120  161  134  162  190\n149  138  142  146  199  126  165  156  153  193  144  166  170  121  171  132  101  194  187  188\n113  130  176  154  177  120  117  150  114  183  186  181  100  163  160  167  147  198  111  119\n\u6837\u4f8b\u8f93\u51fa2\n105  120\n\n\n\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void out() {\n        Scanner in = new Scanner(System.in);\n        int n;\n        while(in.hasNext()) {\n            n = in.nextInt();\n            String fuck = in.nextLine();//\u89e3\u51b3n\u540e\u7684 /r\n            String []s = new String[n];\n            for (int i = 0; i < n; i++)\n                s[i] = in.nextLine();\n\n            //\n            int num[] = new int[10000];\n            int k=0;\n            for (int i = 0; i < s.length; i++) {\n                String []arr = s[i].split(\"\\\\s+\");\n                for (int j = 0; j < arr.length; j++)\n                    num[k++] = Integer.parseInt(arr[j]+\"\");\n\n            }\n            Arrays.sort(num, 0, k);\n            int mn[] = new int[2];\n            for (int i = 1; i < k; i++) {\n                if(num[i] != num[i-1]+1 && num[i] != num[i-1])\n                    mn[0] = num[i-1]+1;\n                if (num[i] == num[i-1])\n                    mn[1] = num[i];\n            }\n            System.out.println(mn[0]+\" \"+mn[1]);\n        }\n    }\n    public static void main(String[] args) {\n        out();\n    }\n}\n\n//\u4e0b\u9762\u662fc++\u5b9e\u73b0\u65b9\u5f0f\n#include<iostream>\n#include<stdio.h>\n//#include<stdlib.h>\n//#include<string.h>\n//#include<string>\n//#include<math.h>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    while(cin>>n){\n       int num[100*n];\n       int value,k=0;\n      while(scanf(\"%d\",&value)!=EOF)\n        {\n         num[k++]=value;\n        }\n        sort(num,num+k);\n        int mn[2];\n      for(int i=1;i<k;++i){\n        if(num[i] != num[i-1]+1 && num[i] != num[i-1])\n                mn[0] = num[i-1]+1;\n        if (num[i] == num[i-1])\n                mn[1] = num[i];\n      }\n        cout<<mn[0]<<\" \"<<mn[1]<<endl;\n    }\n    return 0;\n}",
            "title": "\u9519\u8bef\u7968\u636e"
        },
        {
            "location": "/School/\u9636\u4e58\u8ba1\u7b97/",
            "text": "1066: \u9636\u4e58\u8ba1\u7b97\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8f93\u51fan!\u7684\u503c\u3002\n\u3000\u3000\u5176\u4e2dn!=1\n2\n3\n\u2026\nn\u3002\n\n\n\u7b97\u6cd5\u63cf\u8ff0\n\n\nn!\u53ef\u80fd\u5f88\u5927\uff0c\u800c\u8ba1\u7b97\u673a\u80fd\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u6709\u9650\uff0c\u9700\u8981\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7684\u65b9\u6cd5\u3002\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4A\u6765\u8868\u793a\u4e00\u4e2a\u5927\u6574\u6570a\uff0cA[0]\u8868\u793aa\u7684\u4e2a\u4f4d\uff0cA[1]\u8868\u793aa\u7684\u5341\u4f4d\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\n\u3000\u3000\u5c06a\u4e58\u4ee5\u4e00\u4e2a\u6574\u6570k\u53d8\u4e3a\u5c06\u6570\u7ec4A\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u4e58\u4ee5k\uff0c\u8bf7\u6ce8\u610f\u5904\u7406\u76f8\u5e94\u7684\u8fdb\u4f4d\u3002\n\u3000\u3000\u9996\u5148\u5c06a\u8bbe\u4e3a1\uff0c\u7136\u540e\u4e582\uff0c\u4e583\uff0c\u5f53\u4e58\u5230n\u65f6\uff0c\u5373\u5f97\u5230\u4e86n!\u7684\u503c\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570n\uff0cn< =1000\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fan!\u7684\u51c6\u786e\u503c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n10\n\n\u6837\u4f8b\u8f93\u51fa\n3628800\n\n\n\n\n#include<iostream>\n\nusing namespace std;\n//\u5982\u679c\u4e58\u79ef\u662f\u4e2a\u4f4d\u8d4b\u503c\uff0c\u5426\u5219\u8d4b\u503c\u5e76\u8fd4\u56de\u5341\u4f4d\u6570\nint jc(int A[],int k,int i,int value){//i\u8868\u793a\u5f53\u524d\u4f4d\u6570\n    if((A[i]*k+value)/10 < 1){\n        A[i] =A[i]*k+value;\n    }\n    else{\n        int temp=A[i];\n        A[i] =(A[i]*k+value)%10;\n        return (temp*k+value)/10;\n    }\n    return 0;\n}\n\nint main()\n{\n    int n,s=10000;\n    while(cin>>n){\n    //\u521d\u59cb\u5316A\n    int A[s];\n    A[0]=1;\n    for(int i=1;i<s;++i)\n        A[i]=0;\n    //\u6c42\u9636\u4e58\n    int value=0;\n    for(int k=2;k<=n;++k)\n        for(int i=0;i<s;++i)\n        {\n            value=jc(A,k,i,value);\n        }\n\n    while((s-1)>=0){\n        if(A[s-1]!=0)\n            break;\n        s--;\n    }\n\n    for(int i=s-1;i>=0;i--)\n        cout<<A[i];\n    cout<<endl;\n\n    }\n    return 0;\n}",
            "title": "\u9636\u4e58\u8ba1\u7b97"
        },
        {
            "location": "/School/\u9ad8\u7cbe\u5ea6\u52a0\u6cd5/",
            "text": "1067: \u9ad8\u7cbe\u5ea6\u52a0\u6cd5\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u8f93\u5165\u4e24\u4e2a\u6574\u6570a\u548cb\uff0c\u8f93\u51fa\u8fd9\u4e24\u4e2a\u6574\u6570\u7684\u548c\u3002a\u548cb\u90fd\u4e0d\u8d85\u8fc7100\u4f4d\u3002\n\n\n\u7b97\u6cd5\u63cf\u8ff0\n\n\n\u7531\u4e8ea\u548cb\u90fd\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u8bed\u8a00\u4e2d\u7684\u6807\u51c6\u6570\u636e\u7c7b\u578b\u6765\u5b58\u50a8\u3002\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\uff0c\u4e00\u822c\u4f7f\u7528\u6570\u7ec4\u6765\u5904\u7406\u3002\n    \u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4A\uff0cA[0]\u7528\u4e8e\u5b58\u50a8a\u7684\u4e2a\u4f4d\uff0cA[1]\u7528\u4e8e\u5b58\u50a8a\u7684\u5341\u4f4d\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u540c\u6837\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4B\u6765\u5b58\u50a8b\u3002\n    \u8ba1\u7b97c  =  a  +  b\u7684\u65f6\u5019\uff0c\u9996\u5148\u5c06A[0]\u4e0eB[0]\u76f8\u52a0\uff0c\u5982\u679c\u6709\u8fdb\u4f4d\u4ea7\u751f\uff0c\u5219\u628a\u8fdb\u4f4d\uff08\u5373\u548c\u7684\u5341\u4f4d\u6570\uff09\u5b58\u5165r\uff0c\u628a\u548c\u7684\u4e2a\u4f4d\u6570\u5b58\u5165C[0]\uff0c\u5373C[0]\u7b49\u4e8e(A[0]+B[0])%10\u3002\u7136\u540e\u8ba1\u7b97A[1]\u4e0eB[1]\u76f8\u52a0\uff0c\u8fd9\u65f6\u8fd8\u5e94\u5c06\u4f4e\u4f4d\u8fdb\u4e0a\u6765\u7684\u503cr\u4e5f\u52a0\u8d77\u6765\uff0c\u5373C[1]\u5e94\u8be5\u662fA[1]\u3001B[1]\u548cr\u4e09\u4e2a\u6570\u7684\u548c\uff0e\u5982\u679c\u53c8\u6709\u8fdb\u4f4d\u4ea7\u751f\uff0c\u5219\u4ecd\u53ef\u5c06\u65b0\u7684\u8fdb\u4f4d\u5b58\u5165\u5230r\u4e2d\uff0c\u548c\u7684\u4e2a\u4f4d\u5b58\u5230C[1]\u4e2d\u3002\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5373\u53ef\u6c42\u51faC\u7684\u6240\u6709\u4f4d\u3002\n\u3000\u3000\u6700\u540e\u5c06C\u8f93\u51fa\u5373\u53ef\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u5305\u62ec\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570a\uff0c\u7b2c\u4e8c\u884c\u4e3a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570b\u3002\u4e24\u4e2a\u6574\u6570\u90fd\u4e0d\u8d85\u8fc7100\u4f4d\uff0c\u4e24\u6570\u7684\u6700\u9ad8\u4f4d\u90fd\u4e0d\u662f0\u3002\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793aa  +  b\u7684\u503c\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n20100122201001221234567890\n2010012220100122\n\n\u6837\u4f8b\u8f93\u51fa\n20100122203011233454668012\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String a,b;\n        while(in.hasNext()) {\n            a=in.next();\n            b=in.next();\n            char []A1=a.toCharArray();\n            char []B1=b.toCharArray();\n            int []A = new int[A1.length];\n            int j=0;\n            for (int i = A1.length-1; i >= 0; i--)\n                A[j++]=Integer.parseInt(A1[i]+\"\");\n            int []B = new int[B1.length];\n            j=0;\n            for (int i = B1.length-1; i >= 0; i--)\n                B[j++]=Integer.parseInt(B1[i]+\"\");\n            int len = A.length>B.length?A.length:B.length;\n            int []C = new int[len+1];\n            //deal\n            int i=0, r=0;\n            while(i<A.length && i<B.length) {\n                C[i] = (A[i]+B[i]+r)%10;\n                r=(A[i]+B[i]+r)/10;\n                i++;\n            }\n\n            if (A.length>B.length) {\n                for (int k = i; k < A.length; k++) {\n                    C[k] = (A[k]+r)%10;\n                    r=(A[k]+r)/10;\n                }\n                C[C.length-1] = r;\n            }else if(A.length<B.length){\n                for (int k = i; k < B.length; k++) {\n                    C[k] = (B[k]+r)%10;\n                    r=(B[k]+r)/10;\n                }\n                C[C.length-1] = r;\n            }else if(A.length==B.length && r!=0) {\n                C[i] =r;\n            }\n\n            i=C.length-1;\n            for (; i >=0; i--)\n                if(C[i]!=0)\n                    break;\n\n            for (int k = i; k >=0; k--)\n                System.out.print(C[k]);\n            System.out.println();\n        }\n    }\n\n}",
            "title": "\u9ad8\u7cbe\u5ea6\u52a0\u6cd5"
        },
        {
            "location": "/School/\u9f9f\u5154\u8d5b\u8dd1\u9884\u6d4b/",
            "text": "1068: \u9f9f\u5154\u8d5b\u8dd1\u9884\u6d4b\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\n\u8bdd\u8bf4\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6709\u5404\u79cd\u5404\u6837\u7684\u5154\u5b50\u548c\u4e4c\u9f9f\uff0c\u4f46\u662f  \u7814\u7a76\u53d1\u73b0\uff0c\u6240\u6709\u7684\u5154\u5b50\u548c\u4e4c\u9f9f\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u7279\u70b9\u2014\u2014\u559c\u6b22\u8d5b\u8dd1\u3002\u4e8e\u662f\u4e16\u754c\u4e0a\u5404\u4e2a\u89d2\u843d\u90fd\u4e0d\u65ad\u5728\u53d1\u751f\u7740\u4e4c\u9f9f\u548c\u5154\u5b50\u7684\u6bd4\u8d5b\uff0c\u5c0f\u534e\u5bf9\u6b64\u5f88\u611f\u5174\u8da3\uff0c\u4e8e\u662f\u51b3\u5b9a\u7814\u7a76\u4e0d\u540c\u5154  \u5b50\u548c\u4e4c\u9f9f\u7684\u8d5b\u8dd1\u3002\u4ed6\u53d1\u73b0\uff0c\u5154\u5b50\u867d\u7136\u8dd1\u6bd4\u4e4c\u9f9f\u5feb\uff0c\u4f46\u5b83\u4eec\u6709\u4f17\u6240\u5468\u77e5\u7684\u6bdb\u75c5\u2014\u2014\u9a84\u50b2\u4e14\u61d2\u60f0\uff0c\u4e8e\u662f\u5728\u4e0e\u4e4c\u9f9f\u7684\u6bd4\u8d5b\u4e2d\uff0c\u4e00\u65e6\u4efb\u4e00\u79d2\u7ed3\u675f\u540e\u5154\u5b50\u53d1\u73b0\u81ea\u5df1\u9886\u5148t\u7c73\u6216\u4ee5  \u4e0a\uff0c\u5b83\u4eec\u5c31\u4f1a\u505c\u4e0b\u6765\u4f11\u606fs\u79d2\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5154\u5b50\uff0ct\uff0cs\u7684\u6570\u503c\u662f\u4e0d\u540c\u7684\uff0c\u4f46\u662f\u6240\u6709\u7684\u4e4c\u9f9f\u5374\u662f\u4e00\u81f4\u2014\u2014\u5b83\u4eec\u4e0d\u5230\u7ec8\u70b9\u51b3\u4e0d\u505c\u6b62\u3002\n\n\n\u7136\u800c\u6709\u4e9b\u6bd4\u8d5b\u76f8\u5f53\u6f2b\u957f\uff0c\u5168\u7a0b\u89c2\u770b\u4f1a\u8017\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u800c\u5c0f\u534e\u53d1\u73b0\u53ea\u8981\u5728\u6bcf\u573a\u6bd4\u8d5b\u5f00\u59cb\u540e\u8bb0\u5f55\u4e0b\u5154\u5b50\u548c\u4e4c\u9f9f\u7684\u6570\u636e\u2014\u2014\u5154\u5b50\u7684\u901f\u5ea6v1\uff08\u8868\u793a\u6bcf\u79d2\u5154\u5b50\u80fd\u8dd1v1  \u7c73\uff09\uff0c\u4e4c\u9f9f\u7684\u901f\u5ea6v2\uff0c\u4ee5\u53ca\u5154\u5b50\u5bf9\u5e94\u7684t\uff0cs\u503c\uff0c\u4ee5\u53ca\u8d5b\u9053\u7684\u957f\u5ea6l\u2014\u2014\u5c31\u80fd\u9884\u6d4b\u51fa\u6bd4\u8d5b\u7684\u7ed3\u679c\u3002\u4f46\u662f\u5c0f\u534e\u5f88\u61d2\uff0c\u4e0d\u60f3\u901a\u8fc7\u624b\u5de5\u8ba1\u7b97\u63a8\u6d4b\u51fa\u6bd4\u8d5b\u7684\u7ed3\u679c\uff0c\u4e8e\u662f\u4ed6\u627e  \u5230\u4e86\u4f60\u2014\u2014\u6e05\u534e\u5927\u5b66\u8ba1\u7b97\u673a\u7cfb\u7684\u9ad8\u624d\u751f\u2014\u2014\u8bf7\u6c42\u5e2e\u52a9\uff0c\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684\u4e00\u573a\u6bd4\u8d5b\u7684\u6570\u636ev1\uff0cv2\uff0ct\uff0cs\uff0cl\uff0c\u9884\u6d4b\u8be5\u573a\u6bd4\u8d5b\u7684\u7ed3\u679c\u3002\n\n\n\u8f93\u5165\u683c\u5f0f\n\n\n\u8f93\u5165\u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b\u7528\u7a7a\u683c\u9694\u5f00\u7684\u4e94\u4e2a\u6b63\u6574\u6570v1\uff0cv2\uff0ct\uff0cs\uff0cl\uff0c\u5176\u4e2d(v1,v2< =100;t< =300;s< =10;l< =10000\u4e14\u4e3av1,v2\u7684\u516c\u500d\u6570)\n\n\n\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u51fa\u5305\u542b\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u6bd4\u8d5b\u7ed3\u679c\u2014\u2014\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u201cT\u201d\u6216\u201cR\u201d\u6216\u201cD\u201d\uff0c\u5206\u522b\u8868\u793a\u4e4c\u9f9f\u83b7\u80dc\uff0c\u5154\u5b50\u83b7\u80dc\uff0c\u6216\u8005\u4e24\u8005\u540c\u65f6\u5230\u8fbe\u7ec8\u70b9\u3002\n\n\n\u7b2c\u4e8c\u884c\u8f93\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u83b7\u80dc\u8005\uff08\u6216\u8005\u53cc\u65b9\u540c\u65f6\uff09\u5230\u8fbe\u7ec8\u70b9\u6240\u8017\u8d39\u7684\u65f6\u95f4\uff08\u79d2\u6570\uff09\u3002\n\n\n\u6837\u4f8b\u8f93\u5165\n10  5  5  2  20\n\n\u6837\u4f8b\u8f93\u51fa\nD\n4\n\n\u6837\u4f8b\u8f93\u5165\n10  5  5  1  20\n\n\u6837\u4f8b\u8f93\u51fa\nR\n3\n\n\u6837\u4f8b\u8f93\u5165\n10  5  5  3  20\n\n\u6837\u4f8b\u8f93\u51fa\nT\n4\n\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int v1,v2,t,s,l;\n        while(in.hasNext()) {\n            v1=in.nextInt();\n            v2=in.nextInt();\n            t=in.nextInt();\n            s=in.nextInt();\n            l=in.nextInt();\n\n            int Sr=0,St=0;\n            int time=0;\n            while(Sr!=l && St!=l) {\n                if (Sr-St >= t) {\n                    St += v2*s;\n                    time +=s;\n                    continue;\n                }\n                Sr += v1;\n                St += v2;\n                time++;\n            }\n            if(time == l/v2 && Sr==l)\n                System.out.println(\"D\");\n            else if (time < l/v2)\n                System.out.println(\"R\");\n            else\n                System.out.println(\"T\");\n            time = time>l/v2?l/v2:time;\n            System.out.println(time);\n        }\n    }\n\n}",
            "title": "\u9f9f\u5154\u8d5b\u8dd1\u9884\u6d4b"
        },
        {
            "location": "/\u5b57\u7b26\u4e32/Detect Capital_toUpperCase&&substring/",
            "text": "520. Detect Capital\n\n\nGiven a word, you need to judge whether the usage of capitals in it is right or not.\nWe define the usage of capitals in a word to be right when one of the following cases holds:\nAll letters in this word are capitals, like \"USA\".\nAll letters in this word are not capitals, like \"leetcode\".\nOnly the first letter in this word is capital if it has more than one letter, like \"Google\".\nOtherwise, we define that this word doesn't use capitals in a right way.\n\n\nExample 1:\nInput: \"USA\"\nOutput: True\n\n\nExample 2:\nInput: \"FlaG\"\nOutput: False\n\n\nA: 65 a: 97 \u4e24\u8005\u76f8\u5dee32\uff0c\u5171\u670926\u4e2a\u5b57\u6bcd\n\n\n//\u76f4\u63a5\u66b4\u529b\npublic static boolean detectCapitalUse(String word) {\n    char zm[] = word.toCharArray();\n    boolean status = true;\n    if(zm.length==1)\n        return status;\n    if(zm[0] <= 'Z' && zm[1] <= 'Z') { \n        for (int i = 2; i < zm.length; i++) \n            if(zm[i] >'Z') {\n                status = false;\n                break;\n            }\n    }\n    else if(zm[0] <= 'Z' && zm[1] > 'Z') { \n        for (int i = 2; i < zm.length; i++) \n            if(zm[i] <='Z') {\n                status = false;\n                break;\n            }\n    }   \n    else if(zm[0] > 'Z') { \n        for (int i = 1; i < zm.length; i++) \n            if(zm[i] <='Z') {\n                status = false;\n                break;\n            }\n    }   \n\n    return status;\n}\n\n//\u4f7f\u7528string\u5185\u7f6e\u51fd\u6570\npublic boolean detectCapitalUse(String word) {\n    if (word.length() < 2) return true;\n    if (word.toUpperCase().equals(word)) return true;\n    if (word.substring(1).toLowerCase().equals(word.substring(1))) return true;\n    return false;\n}\n/*\nsubstring\n\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\uff0c\u5b83\u662f\u6b64\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002\n\u8be5\u5b50\u5b57\u7b26\u4e32\u4ece\u6307\u5b9a\u7684 beginIndex \u5904\u5f00\u59cb\uff0c\u76f4\u5230\u7d22\u5f15 endIndex - 1 \u5904\u7684\u5b57\u7b26\u3002\n\n\"hamburger\".substring(4, 8) returns \"urge\"\n*/",
            "title": "Detect Capital toUpperCase&&substring"
        },
        {
            "location": "/\u5b57\u7b26\u4e32/Judge Route Circle/",
            "text": "657. Judge Route Circle\n\n\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves,\njudge if this robot makes a circle, which means it moves back to the original place.\n\n\nThe move sequence is represented by a string. And each move is represent by \na character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). \nThe output should be true or false representing whether the robot makes a circle.\n\n\nExample 1:\nInput: \"UD\"\nOutput: true\n\n\nExample 2:\nInput: \"LL\"\nOutput: false\n\n\n/*\n\u601d\u8def\uff1a\n    \u5c06\u5b57\u7b26\u4e32moves\u8f6c\u6362\u4e3a\u53ef\u62b5\u6d88\u7684\u6570\u5b57\u6570\u7ec4b[]\uff0c\u5efa\u7acbstack\uff0c\u5c06\u6570\u7ec4b[i]\u5143\u7d20\u6dfb\u52a0\u8fdb\u53bb\uff0c\n    \u8fdb\u5165\u524d\u5224\u65adstack\u662f\u5426\u5305\u542bb[i]\u7684\u76f8\u53cd\u6570-b[i]\uff0c\u6709\u7684\u8bdd\u79fb\u9664-b[i]\uff0c\u76f4\u81f3\u904d\u5386\u5b8c\u6570\u7ec4b[i]\n    \u6700\u540e\u5224\u65adstack\u662f\u5426\u4e3a\u7a7a\u3002\n*/\npublic boolean judgeCircle(String moves) {\n    //\u5c06\u5b57\u7b26\u4e32moves\u8f6c\u6362\u4e3a\u53ef\u62b5\u6d88\u7684\u6570\u5b57\u6570\u7ec4b[]\n    char []a=moves.toCharArray();\n    int []b=new int[a.length];\n    for (int i = 0; i < a.length; i++) {\n        if(a[i]=='L')\n            b[i]=1;\n        if(a[i]=='R')\n            b[i]=-1;\n        if(a[i]=='U')\n            b[i]=2;\n        if(a[i]=='D')\n            b[i]=-2;\n    }\n    //\u5efa\u7acbstack\uff0c\u5c06\u6570\u7ec4b[i]\u5143\u7d20\u6dfb\u52a0\u8fdb\u53bb\u5e76\u5224\u65ad\n    LinkedList<Integer> stack = new LinkedList<>();\n    for (int i = 0; i < b.length; i++) {\n        if (stack.isEmpty()) \n            stack.push(b[i]);\n        else {\n            if(stack.contains(-b[i])) {\n                stack.remove(stack.indexOf(-b[i]));\n                continue;\n            }\n            stack.push(b[i]);\n        }\n    }\n    //stack\u4e3a\u7a7a\u5219true\n    if(stack.isEmpty())\n        return true;\n    else\n        return false;\n}\n\n/*\n\u4e0a\u9762\u4ee3\u7801\u52c9\u5f3a\u901a\u8fc7\uff0c\u65f6\u95f4\uff1aO(logn),\u7a7a\u95f4\u6709\u4e24\u4e2a\u6570\u7ec4+\u4e00\u4e2astack\uff0c\u663e\u7136\u6548\u7387\u592a\u4f4e\uff01\n\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u63d0\u53d6\u6700\u6838\u5fc3\u7684\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\uff1aL->R \u3001 U->D\uff1b\u53ea\u8981\u6210\u5bf9\u51fa\u73b0\u5c31\u662ftrue\n*/\npublic boolean judgeCircle(String moves) {\n    int x=0,y=0;\n    for (char s : moves.toCharArray()) {\n        if(s=='L')\n            x++;\n        if(s=='R')\n            x--;\n        if(s=='U')\n            y++;\n        if(s=='D')\n            y--;\n    }\n    return x==0 && y==0;\n}",
            "title": "Judge Route Circle"
        },
        {
            "location": "/\u5b57\u7b26\u4e32/Reverse String/",
            "text": "344. Reverse String\n\n\nWrite a function that takes a string as input and returns the string reversed.\n\n\nExample:\nGiven s = \"hello\", return \"olleh\".\n\n\npublic String reverseString(String s) {\n    int len=s.length();\n    char []b=new char[len];\n    for (char a : s.toCharArray()) {\n        b[len-1] = a;\n        len--;\n    }\n    String end = new String(b);\n    return end;\n}",
            "title": "Reverse String"
        },
        {
            "location": "/\u5b57\u7b26\u4e32/Reverse Words in a String III/",
            "text": "557. Reverse Words in a String III\n\n\nGiven a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n\nExample 1:\nInput: \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\n\n\nclass Solution {\n    //\u7f6e\u53cd\u5355\u4e2a\u5355\u8bcd\n    public static String reverseString(String s) {\n        int len=s.length();\n        char []b=new char[len];\n        for (char a : s.toCharArray()) {\n            b[len-1] = a;\n            len--;\n        }\n        String end = new String(b);\n        return end;\n    }\n    //\u7f6e\u53cd\u6574\u6761\u5b57\u7b26\u4e32\n    public String reverseWords(String s) {\n        char a[] = s.toCharArray();\n        //\u786e\u5b9a\u5355\u4e2a\u5355\u8bcd\u4e2a\u6570\n        int count=1;\n        for (int i = 0; i < a.length; i++) \n            if(a[i]==' ')\n                count++;\n        int j=0;\n        //\u8bbe\u7f6e\u6570\u7ec4b\uff0c\u7528\u6765\u5b58\u653e\u7f6e\u53cd\u540e\u7684\u5355\u8bcd\n        String b[] = new String[count];\n        for (int i = 0; i < count; i++) {\n            b[i] = new String();\n        }\n\n        for (int i = 0; i < b.length; i++) {\n            while(j < a.length) {\n                if(a[j]==' ') {\n                    b[i] = reverseString(b[i])+\" \";\n                    j++;\n                    break;\n                }\n                b[i]+=a[j];\n                j++;\n            }\n        }\n        //\u5904\u7406\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\n        b[count-1] = reverseString(b[count-1]);\n        String string = new String();\n        for (int i = 0; i < b.length; i++) \n            string+=b[i];\n\n        return string;\n    }\n}",
            "title": "Reverse Words in a String III"
        },
        {
            "location": "/\u5b57\u7b26\u4e32/Valid Palindrome II/",
            "text": "680. Valid Palindrome II\n\n\nGiven a non-empty string s, you may delete at most one character. \nJudge whether you can make it a palindrome.\n\n\nExample 1:\nInput: \"aba\"\nOutput: True\n\n\nExample 2:\nInput: \"abca\"\nOutput: True\n\n\nExplanation: You could delete the character 'c'.\n\n\n/*\n\u601d\u8def\uff1a\n    \u5229\u7528\u4e8c\u5206\u641c\u7d22\uff0c\u6bd4\u8f83\u4e24\u7aef\u503c\uff0c\u5982\u679c\u503c\u4e0d\u76f8\u7b49\uff0c\u5219if(sum[i+1]==sum[j]&&sum[i+2]==sum[j-1])\n    \u771f\u65f6\uff1a\u53f3\u8fb9\u7684\u503c\u539f\u5730\u8e0f\u6b65\n    \u5047\u65f6\uff1a\u5de6\u8fb9\u7684\u503c\u539f\u5730\u8e0f\u6b65\n    \u76f4\u81f3count\u5927\u4e8e1\n*/\n\npublic static boolean validPalindrome(String s) {\n    boolean status=true;\n    char[] sum = s.toCharArray();\n    int i =0 ,j=sum.length-1,count=0;\n    while (i<j) {\n        if(sum[i]!=sum[j]) {\n            if(sum.length<3)\n            {\n                status=true;\n                break;\n            }\n            if(sum[i+1]==sum[j]&&sum[i+2]==sum[j-1])\n                j++;\n            else\n                i--;\n\n            count++;\n            if(count>1)\n            {\n                status=false;\n                break;\n            }\n        }\n\n    i++;j--;\n    }\n  return status;\n}",
            "title": "Valid Palindrome II"
        },
        {
            "location": "/\u521d\u7ea7\u9898/A + B \u95ee\u9898/",
            "text": "A + B \u95ee\u9898\n \n\n\n\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570a\u548cb, \u6c42\u4ed6\u4eec\u7684\u548c, \u4f46\u4e0d\u80fd\u4f7f\u7528 + \u7b49\u6570\u5b66\u8fd0\u7b97\u7b26\u3002\n\n\n\u6837\u4f8b\n\u5982\u679c a=1 \u5e76\u4e14 b=2\uff0c\u8fd4\u56de3\n\n\npublic static int aplusb(int a, int b) {\n    while (b !=0) {//\u76f4\u5230\u4e0d\u4ea7\u751f\u8fdb\u4f4d\u7ed3\u675f\n        int _a = a ^ b;\n        int _b = (a&b)<<1;\n        a = _a ;\n        b = _b;\n    }\n    return a;\n}\n\n//\u9012\u5f52\npublic static int aplusb(int a, int b) {\n    if(a==0)\n        return b;\n    if(b==0)\n        return a;\n    int _a = a ^ b;\n    int _b = (a&b)<<1;\n    return aplusb(_a, _b);\n}",
            "title": "A + B \u95ee\u9898"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Array Partition I/",
            "text": "\ufeff\n561. Array Partition I\n\n\nGiven an array of 2n integers, your task is to group these integers into n pairs of integer, \nsay (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n \nas large as possible.\n\n\nExample 1:\nInput: [1,4,3,2]\n\n\nOutput: 4\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\nNote:\nn is a positive integer, which is in the range of [1, 10000].\nAll the integers in the array will be in the range of [-10000, 10000].\n\n\n\u601d\u8def\uff1a\u6392\u5e8f\u6570\u7ec4\uff0c\u53d6\u76f8\u90bb\u4e24\u4e2a\u6570\u6700\u5c0f\u503c\uff0c\u6b65\u65702\u904d\u5386\n\n\nclass Solution {\n    public int arrayPairSum(int[] nums) {\n        int sum=0;\n        Arrays.sort(nums);\n        for (int i = 1; i < nums.length; i+=2) {\n            sum += Math.min(nums[i],nums[i-1]);\n        }\n        return sum;\n    }\n}",
            "title": "Array Partition I"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Baseball Game/",
            "text": "682. Baseball Game\n\n\nYou're now a baseball game point recorder.\nGiven a list of strings, each string can be one of the 4 following types:\nInteger (one round's score): Directly represents the number of points you get in this round.\n\"+\" (one round's score): Represents that the points you get in this round are the sum of the last two valid round's points.\n\"D\" (one round's score): Represents that the points you get in this round are the doubled data of the last valid round's points.\n\"C\" (an operation, which isn't a round's score): Represents the last valid round's points you get were invalid and should be removed.\nEach round's operation is permanent and could have an impact on the round before and the round after.\n\n\nYou need to return the sum of the points you could get in all the rounds.\n\n\nExample 1:\nInput: [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation: \nRound 1: You could get 5 points. The sum is: 5.\nRound 2: You could get 2 points. The sum is: 7.\nOperation 1: The round 2's data was invalid. The sum is: 5.\n\nRound 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.\nRound 4: You could get 5 + 10 = 15 points. The sum is: 30.\n\n\nExample 2:\nInput: [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation: \nRound 1: You could get 5 points. The sum is: 5.\nRound 2: You could get -2 points. The sum is: 3.\nRound 3: You could get 4 points. The sum is: 7.\nOperation 1: The round 3's data is invalid. The sum is: 3.\n\nRound 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.\nRound 5: You could get 9 points. The sum is: 8.\nRound 6: You could get -4 + 9 = 5 points. The sum is 13.\nRound 7: You could get 9 + 5 = 14 points. The sum is 27.\n\n\nNote:\nThe size of the input list will be between 1 and 1000.\nEvery integer represented in the list will be between -30000 and 30000.\n\n\n\u601d\u8def\uff1a\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u641e\u6e05\u695a\u9898\u610f\u5373\u53ef\uff1b\u5efa\u7acb\u6570\u7ec4sum\u7528\u6765\u5b58\u50a8\u6700\u540e\u6dfb\u52a0\u7684\u6570\u5b57\uff0c\u6700\u540e\u904d\u5386sum\u7edf\u8ba1\u548c\u5373\u53ef\n\n\npublic int calPoints(String[] ops) {\n    int []sum = new int[ops.length];\n    int k = 0,sums =0;\n    for (int i = 0; i < ops.length; i++) {\n        if (ops[i].equals(\"+\")) {\n            sum[k] = sum[k-1] + sum[k-2];\n            k++;\n        }\n        else if (ops[i].equals(\"D\")) {\n            sum[k] = 2 * sum[k-1];\n            k++;\n        }\n        else if (ops[i].equals(\"C\")) {\n            k --;\n            sum[k] = 0;\n        }\n        else \n            sum[k++] = Integer.parseInt(ops[i]);\n\n    }\n\n    for (int i = 0; i < sum.length; i++) \n            sums += sum[i];\n\n    return sums;\n}\n\n\n//\u5229\u7528\u6808,\u4e0a\u9762\u7684\u601d\u8def\u5176\u5b9e\u62bd\u8c61\u51fa\u6765\u5c31\u662f\u6808\npublic int calPoints(String[] ops) {\n    LinkedList<Integer> stack = new LinkedList<>();\n    int a,b,sum=0;\n    for (int i = 0; i < ops.length; i++) {\n        if (ops[i].equals(\"+\")) {\n            a = stack.pop();\n            b = stack.pop();\n            stack.push(b);\n            stack.push(a);\n            stack.push(a+b);\n        }\n        else if (ops[i].equals(\"D\")) {\n            a = stack.pop();\n            stack.push(a);\n            stack.push(2*a);\n        }\n        else if (ops[i].equals(\"C\")) {\n            stack.pop();\n        }\n        else \n            stack.push(Integer.parseInt(ops[i]));\n\n    }\n    while(!stack.isEmpty())\n        sum += stack.pop();\n    return sum;\n}\n\n//\u53ef\u4ee5\u770b\u51fa\uff0c\u6548\u7387\u6ca1\u6709\u6570\u7ec4\u9ad8\uff0c\u601d\u8def\u4e5f\u5dee\u4e0d\u591a\uff0c\u5f53\u7136\u6808\u6709\u4e2a\u597d\u5904\u5c31\u662f\u4e0d\u7528\u5904\u7406\u4e0b\u6807",
            "title": "Baseball Game"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Can Place Flowers/",
            "text": "605. Can Place Flowers\n\n\nSuppose you have a long flowerbed in which some of the plots are planted and some are not. However, \nflowers cannot be planted in adjacent plots - they would compete for water and both would die.\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty),\nand a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.\n\n\nExample 1:\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: True\nExample 2:\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: False\nNote:\nThe input array won't violate no-adjacent-flowers rule.\nThe input array size is in the range of [1, 20000].\nn is a non-negative integer which won't exceed the input array size.\n\n\n/*\n\u6bd4\u8f83\u5f53\u524d\u4f4d\u7f6e\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u662f\u5426\u4e3a0\u4e14\u5f53\u524d\u4f4d\u7f6e\u662f0\uff0c\u662fcount++\uff1b\n\u4f46\u6700\u91cd\u8981\u7684\u662f\u5904\u7406\u597d\u9996\u5c3e\u4e24\u7aef\uff0ceg\uff1a[0,0,1,0,0];\u4ee5\u53ca\u5f53len<=3\u7684\u60c5\u51b5\n*/\n\nclass Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        int count=0,len=flowerbed.length;\n     //\u5904\u7406len<=3 and \u9996\u5c3e\u4e24\u7aef \u7684\u60c5\u51b5\n        if (len==1 && flowerbed[0]==0) {\n            return 1>=n;\n        }\n        if (len==1 && flowerbed[0]==1) {\n            return 0>=n;\n        }\n\n        if (flowerbed[0]==0 && flowerbed[1]==0) \n        {   \n            count++;\n            flowerbed[0]=1;\n        }\n        if (flowerbed[len-1]==0 && flowerbed[len-2]==0) \n        {   \n            count++;\n            flowerbed[len-1]=1;\n        }\n    //len>=3 \u7684\u60c5\u51b5\n        for (int i =1; i < len-1 && len>=3; i++) {\n            if(flowerbed[i-1]==0 && flowerbed[i+1]==0 && flowerbed[i]==0)\n            {   \n                flowerbed[i]=1; \n                count++;\n            }\n        }\n\n    return count>=n;\n    }\n}",
            "title": "Can Place Flowers"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Find All Numbers Disappeared in an Array/",
            "text": "448. Find All Numbers Disappeared in an Array\n\n\nGiven an array of integers where 1 \u2264 a[i] \u2264 n (n = size of array), \nsome elements appear twice and others appear once.\nFind all the elements of [1, n] inclusive that do not appear in this array.\nCould you do it without extra space and in O(n) runtime?\nYou may assume the returned list does not count as extra space.\n\n\nExample:\n\n\nInput:\n[4,3,2,7,8,2,3,1]\n\n\nOutput:\n[5,6]\n\n\n//\u4ee5\u4e0b\u662f\u4e24\u4e2a\u53c2\u8003\u4ee3\u7801\uff0c\u5f88\u597d\u5947\u4ed6\u4eec\u662f\u600e\u4e48\u60f3\u51fa\u8fd9\u79cd\u65b9\u6cd5\uff1f\uff0c\u597d\u597d\u601d\u8003\uff0c\u5b66\u4e60\u4e00\u4e0b\n\n\n/*\n      * The basic idea is that we iterate through the input array and mark \n      * elements as negative using nums[nums[i] -1] = -nums[nums[i]-1]. \n      * In this way all the numbers that we have seen will be marked as negative.\n      *  In the second iteration, if a value is not marked as negative, \n      *  it implies we have never seen that index before, \n      *  so just add it to the return list.\n      * */\n\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n         List<Integer> ret = new ArrayList<Integer>();\n\n        for(int i = 0; i < nums.length; i++) {\n            int val = Math.abs(nums[i]) - 1;\n            if(nums[val] > 0) {\n                nums[val] = -nums[val];\n            }\n        }\n\n        for(int i = 0; i < nums.length; i++) {\n            if(nums[i] > 0) {\n                ret.add(i+1);\n            }\n        }\n        return ret;\n    }\n\n//5-line Java Easy-understanding\n\npublic List<Integer> findDisappearedNumbers(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.length;\n        for (int i = 0; i < nums.length; i ++) nums[(nums[i]-1) % n] += n;  //a % b\u5982\u679ca<b,\u4f59\u6570\u662f\u5b83\u81ea\u5df1a\n        for (int i = 0; i < nums.length; i ++) if (nums[i] <= n) res.add(i+1);\n        return res;\n    }",
            "title": "Find All Numbers Disappeared in an Array"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Find Pivot Index/",
            "text": "724. Find Pivot Index\n\n\nGiven an array of integers nums, write a method that returns the \"pivot\" index of this array.\n\n\nWe define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.\n\n\nIf no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.\n\n\nExample 1:\nInput: \nnums = [1, 7, 3, 6, 5, 6]\nOutput: 3\nExplanation: \nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\nAlso, 3 is the first index where this occurs.\nExample 2:\nInput: \nnums = [1, 2, 3]\nOutput: -1\nExplanation: \nThere is no index that satisfies the conditions in the problem statement.\n\n\u9898\u610f\uff1a\n\n    \u5927\u6982\u5c31\u662f\u8bf4\u627e\u5230\u4e00\u4e2a\u7d22\u5f15\u4f7f\u5f97\u6570\u7ec4\u4e24\u8fb9\u548c\u76f8\u7b49\n\n\n//\u6211\u539f\u5148\u601d\u8def\u662f\u6253\u7b97\u7528\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\u65b9\u5f0f\u6bd4\u8f83\u5f97\u51fa\uff0c\u4f46\u7ed3\u679c\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u4e0d\u80fd\u6982\u62ec\u6240\u6709\u6570\u7ec4\u503c\npublic static int pivotIndex(int[] nums) {\n    int sum1=nums[0],sum2=nums[nums.length-1];\n    int i=1,j=nums.length-2;\n    while(i<=j) {\n        if(sum1==sum2)\n            break;\n        if(sum1<sum2)\n            sum1+=nums[i++];\n        if(sum1>sum2)\n            sum2+=nums[j--];\n    }\n    if(i<=j)\n        return i;\n    else\n        return -1;\n}\n//leetcode\u7684\u89e3\npublic int pivotIndex(int[] nums) {\n  int sum=0,leaftsum=0;\n    for(int x : nums)\n        sum+=x;\n    for (int i = 0; i < nums.length; i++) {\n        if(leaftsum==sum-leaftsum-nums[i])\n            return i;\n        leaftsum+=nums[i];\n    }\n    return -1;\n}",
            "title": "Find Pivot Index"
        },
        {
            "location": "/\u521d\u7ea7\u9898/K-diff Pairs in an Array/",
            "text": "\ufeff\n532. K-diff Pairs in an Array\n\n\nGiven an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array.\nHere a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.\n\n\nExample 1:\nInput: [3, 1, 4, 1, 5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\nExample 2:\nInput:[1, 2, 3, 4, 5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\nExample 3:\nInput: [1, 3, 1, 5, 4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\nNote:\nThe pairs (i, j) and (j, i) count as the same pair.\nThe length of the array won't exceed 10,000.\nAll the integers in the given input belong to the range: [-1e7, 1e7].\n\n\npublic int findPairs(int[] nums, int k) {\n    Arrays.sort(nums);\n    int pairs=0;\n    int [] sum =new int [nums.length];\n    for (int i = 1; i < nums.length; i++)\n        sum[i] = nums[i] - nums[i-1];\n\n\n    if (k==0) {\n        for (int i = 1; i < nums.length-1; i++) {\n            if(i==nums.length-2 && sum[i+1]==0)\n                ++pairs;\n            if(sum[i]==sum[i+1])\n                continue;\n\n\n            if (sum[i]==0)\n                ++pairs;\n\n        }\n        if(nums.length==2 && sum[1]==0) pairs=1;\n\n    }else {\n        for (int i = 0; i < nums.length-1; i++) {\n            if(nums[i]==nums[i+1])\n                continue;\n\n            for (int j = i+1; j < nums.length; j++)\n                if (Math.abs(nums[i] - nums[j]) == k) {\n                    ++pairs;\n                    break;\n                }\n\n        }\n    }\n\n\n    return pairs;\n}\n//k==0\u65f6\u7684\u4e0d\u540c\u89e3\u6cd5\nclass Solution {\n    public int findPairs(int[] nums, int k) {\n        Arrays.sort(nums);\n        int pairs=0;\n\n        if(nums.length <2)\n            return 0;\n        if (k==0) {\n            int i=0,count=0,sta = nums[0];\n            if(nums[1]==nums[0])\n                count = 1;\n            while(i < nums.length-1){\n                if(nums[i] == nums[i+1] && nums[i] != sta){\n                    sta=nums[i];\n                    count++;\n                    i++;\n                }\n                i++;\n            }\n\n            pairs = count;\n        }else {\n            for (int i = 0; i < nums.length-1; i++) {\n                if(nums[i]==nums[i+1])\n                    continue;\n\n                for (int j = i+1; j < nums.length; j++)\n                    if (Math.abs(nums[i] - nums[j]) == k) {\n                        ++pairs;\n                        break;\n                    }\n\n            }\n        }\n\n\n        return pairs;\n}\n}",
            "title": "K diff Pairs in an Array"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Longest Continuous Increasing Subsequence/",
            "text": "674. Longest Continuous Increasing Subsequence\n\n\nGiven an unsorted array of integers, find the length of longest continuous increasing subsequence.\n\n\nExample 1:\nInput: [1,3,5,4,7]\nOutput: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5], its length is 3.\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4.\nExample 2:\nInput: [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence is [2], its length is 1.\nNote: Length of the array will not exceed 10,000.\n\n\n/\n\nIntuition:\n    \u8ba1\u7b97\u76f8\u90bb\u7684\u5dee\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u524d\u8fdb\u76f4\u81f3\u9047\u5230\u5c0f\u4e8e0\uff0c\u8bb0\u5f55\u957f\u5ea6\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u904d\u5386\u5b8c\u6570\u7ec4\uff0clen = max(len, i)\uff1b\n\n/\n\n\n\npublic int findLengthOfLCIS(int[] nums) {\n   //\u6784\u9020\u6570\u7ec4sum\uff0c\u7528\u4e8e\u5b58\u653e\u6570\u7ec4nums\u7684\u5dee\u503c\n    int []sum = new int[nums.length+1];\n    int []max_num = new int[nums.length];\n    for (int i = 1; i < nums.length; i++) {\n        sum[i] = nums[i]  - nums[i-1];\n    }\n    //\u5bf9\u6570\u7ec4sum\u64cd\u4f5c\n    int len = 0, j = 0, status=0;\n    for (int i = 1; i < nums.length; i++) {\n        if(sum[i] > 0)\n            len++;\n        else {\n            max_num[++j] = len;\n            len = 0;\n        }       \n    }\n\n    //\u904d\u5386\u627e\u51fa\u6700\u5927\u5b50\u5e8f\u5217\u957f\u5ea6\n    for (int i = 0; i < max_num.length; i++) {\n        len = Math.max(max_num[i],len);\n    }\n    if(nums.length <= 0)\n        len = -1;\n    return len+1;\n}    \n\n\n\n//\u4e0a\u9762\u4ee3\u7801\u7a7a\u95f4\u5360\u7528\u592a\u591a\uff0c\u5220\u6389\u6570\u7ec4sum\u548cmax_num\uff0c\u76f4\u63a5\u5728nums\u64cd\u4f5c\n\npublic static int findLengthOfLCIS(int[] nums) {\n //\u64cd\u4f5c\u6570\u7ec4nums\uff0c\u5c06\u76f8\u90bb\u7684\u5dee\u503c\u5b58\u50a8\u5728i-1\n     for (int i = 1; i < nums.length; i++) {\n      nums[i-1] = nums[i]  - nums[i-1];\n   }\n\n     int max_len=0,len = 0;\n     for (int i = 0; i < nums.length-1; i++) {\n      if(nums[i] > 0)\n         len++;\n      else {\n         max_len = Math.max(max_len, len);\n         len = 0;\n      }     \n   }\n\n     max_len = Math.max(max_len, len);\n     if(nums.length <= 0)\n      max_len = -1;\n\n     return max_len+1;\n}",
            "title": "Longest Continuous Increasing Subsequence"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Majority Element/",
            "text": "169. Majority Element\n\n\nGiven an array of size n, find the majority element.\nThe majority element is the element that appears more than \u230a n/2 \u230b times.\n\n\nYou may assume that the array is non-empty and the majority element always\n exist in the array.\n\n\n\u601d\u8def\uff1a\n\n    \u5229\u7528set\u5148\u8fc7\u6ee4\u6389\u91cd\u590d\u5143\u7d20\u5e76\u5c06set\u8f6c\u6362\u4e3a\u6570\u7ec4a[]\uff0c\u4e24\u5c42for\u5faa\u73af\u7edf\u8ba1\u6570\u7ec4a[]\u5404\u5143\u7d20\u51fa\u73b0\n    \u6b21\u6570\uff0c\u6700\u540e\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u5373\u53ef\n\n\npublic int majorityElement(int[] nums) {\n    //\u5229\u7528set\u5148\u8fc7\u6ee4\u6389\u91cd\u590d\u5143\u7d20\u5e76\u5c06set\u8f6c\u6362\u4e3a\u6570\u7ec4a[]\n    Set<Integer> set = new LinkedHashSet<>();\n    for (int i = 0; i < nums.length; i++)\n        set.add(nums[i]);\n    Integer []a = new Integer[set.size()];\n    set.toArray(a);\n    //\u4e24\u5c42for\u5faa\u73af\u7edf\u8ba1\u6570\u7ec4a[]\u5404\u5143\u7d20\u51fa\u73b0\u6b21\u6570\n    int k=0,z=0;\n    int []sum = new int[set.size()];\n    for (int i = 0; i < a.length; i++) {\n         k=0;\n        for (int j = 0; j < nums.length; j++)\n            if (a[i] == nums[j])\n                k++;\n         sum[z++] = k;\n    }\n    //\u6700\u540e\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\u5e76return\n    int value=0;\n    for (int i = 0; i < sum.length; i++)\n        if(sum[i]>value) {\n            value = sum[i];\n            z = i;\n        }\n    return a[z];  \n}\n\n\n\n\n/*\n\u4e0b\u9762\u662f\u83b7\u8d5e\u6700\u591a\u7684\u4ee3\u7801\n\n\n\u601d\u8def\uff1a\n\n\n\u5148\u628amajor\u8bbe\u7f6e\u4e3anum[0]\uff0c\u904d\u5386\u6bd4\u8f83\u662f\u5426\u7b49\u4e8emajor\n\u662f\u7684\uff0ccount++\uff1b\u5426\u5219count--\uff0c\u5982\u679ccount==0\uff0c\n\u8bf4\u660enum[i]\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u539f\u5148\u7684major\uff0c\u6240\u4ee5\u66ff\u6362\n\n\n\n*/\n\n\npublic int majorityElement(int[] num) {\n    int major=num[0], count = 1;\n    for(int i=1; i<num.length;i++){\n        if(count==0){\n            count++;\n            major=num[i];\n        }else if(major==num[i]){\n            count++;\n        }else count--;\n\n    }\n    return major;\n}",
            "title": "Majority Element"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Majority Element/#_1",
            "text": "\u5148\u628amajor\u8bbe\u7f6e\u4e3anum[0]\uff0c\u904d\u5386\u6bd4\u8f83\u662f\u5426\u7b49\u4e8emajor\n\u662f\u7684\uff0ccount++\uff1b\u5426\u5219count--\uff0c\u5982\u679ccount==0\uff0c\n\u8bf4\u660enum[i]\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u539f\u5148\u7684major\uff0c\u6240\u4ee5\u66ff\u6362  */  public int majorityElement(int[] num) {\n    int major=num[0], count = 1;\n    for(int i=1; i<num.length;i++){\n        if(count==0){\n            count++;\n            major=num[i];\n        }else if(major==num[i]){\n            count++;\n        }else count--;\n\n    }\n    return major;\n}",
            "title": "\u601d\u8def\uff1a"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Max Consecutive Ones/",
            "text": "485. Max Consecutive Ones\n\n\nGiven a binary array, find the maximum number of consecutive 1s in this array.\n\n\nExample 1:\nInput: [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s.\n    The maximum number of consecutive 1s is 3.\n\n\nNote:\nThe input array will only contain 0 and 1.\nThe length of input array is a positive integer and will not exceed 10,000\n\n\n/*\nIntuition:\n    int max_num =0\uff0cvalue=0;\n\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5143\u7d20\u503c\u662f1\uff0c++value\uff1b\u5426\u5219max_num=max(value,max_num) and value=0;\u904d\u5386\u7ed3\u675f\u540e\uff0cmax_num\u5c31\u662f\u7ed3\u679c\n*/\n\npublic int findMaxConsecutiveOnes(int[] nums) {\n    int max_num =0,value=0;\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i]==1) {\n            ++value;\n        }else {\n            max_num=Math.max(value,max_num);\n            value=0;\n        }\n    }\n    max_num=Math.max(value,max_num);\n    return max_num;\n}",
            "title": "Max Consecutive Ones"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Maximum Average Subarray I/",
            "text": "\ufeff\n643. Maximum Average Subarray I\n\n\nGiven an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value.\nAnd you need to output the maximum average value.\n\n\nExample 1:\nInput: [1,12,-5,-6,50,3], k = 4\nOutput: 12.75\nExplanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\nNote:\n1 <= k <= n <= 30,000.\nElements of the given array will be in the range [-10,000, 10,000].\n\n\n//\u9898\u610f\u5927\u81f4\u662f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u4ee5\u53cak\uff0c\u6c42\u6700\u5927\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u5e73\u5747\u503c\u3002\n//(1)\u4e0b\u9762\u7684\u4ee3\u7801\u601d\u8def\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u8fd0\u884c\u6570\u636e\u5f88\u591a\u7684\u6570\u7ec4\u4f1a\u8d85\u65f6\uff0c\u6548\u7387\u4e0d\u9ad8\nclass Solution {\n    public double findMaxAverage(int[] nums, int k) {\n       int len=nums.length;\n        int j=1;//\u7528\u4e8e\u523b\u5ea6k\u7684\u79fb\u52a8\n        double sum1=0;\n\n        for (int i =0; i < k; i++) {\n            sum1+=nums[i];\n        }\n        double value=sum1;\n        sum1=0;\n\n        while(k+j<=len) {\n        for (int i =j; i < k+j; i++) {\n            sum1+=nums[i];\n        }\n        value=Math.max(value,sum1);\n        sum1=0;\n        ++j;\n     }\n        return value/k;\n    }\n}\n\n//(2)\u4e0b\u9762\u662f(1)\u4ee3\u7801\u7684\u7b80\u6d01\u9ad8\u6548\u7248\npublic class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        int[] sum = new int[nums.length];\n        sum[0] = nums[0];\n        for (int i = 1; i < nums.length; i++)\n        sum[i] = sum[i - 1] + nums[i];\n        double res = sum[k - 1] * 1.0 / k;\n        for (int i = k; i < nums.length; i++) {\n            res = Math.max(res, (sum[i] - sum[i - k]) * 1.0 / k);\n        }\n        return res;\n    }\n}",
            "title": "Maximum Average Subarray I"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Maximum Product of Three Numbers/",
            "text": "\ufeff\n628. Maximum Product of Three Numbers\n\n\nGiven an integer array, find three numbers whose product is maximum and output\nthe maximum product.\n\n\nExample 1:\nInput: [1,2,3]\nOutput: 6\nExample 2:\nInput: [1,2,3,4]\nOutput: 24\nNote:\nThe length of the given array will be in range [3,104] and all elements are in\nthe range [-1000, 1000].\nMultiplication of any three numbers in the input won't exceed the range of 32-bit\nsigned integer.\n\n\n//\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c06\u6570\u7ec4\u6392\u597d\u5e8f\uff0c\u6bd4\u8f83sum1\u548csum2\u5c31\u884c\nclass Solution {\n    public int maximumProduct(int[] nums) {\n        int len=nums.length;\n        Arrays.sort(nums);\n        int sum1=nums[0]*nums[1]*nums[len-1];\n        int sum2=nums[len-1]*nums[len-2]*nums[len-3];\n        int maxnum=Math.max(sum1,sum2);\n        return maxnum;\n    }\n}",
            "title": "Maximum Product of Three Numbers"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Maximum Subarray/",
            "text": "53. Maximum Subarray\n\n\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\n\n\nFor example, given the array [-2,1,-3,4,-1,2,1,-5,4],\nthe contiguous subarray [4,-1,2,1] has the largest sum = 6.\n\n\nthis problem was discussed by Jon Bentley (Sep. 1984 Vol. 27 No. 9 Communications of the ACM P885)\n\n\nthe paragraph below was copied from his paper (with a little modifications)\n\n\npublic static int maxSubArray(int[] A) {\n    int maxSoFar=A[0], maxEndingHere=A[0];\n    for (int i=1;i<A.length;++i){\n        maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);\n        maxSoFar=Math.max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n}",
            "title": "Maximum Subarray"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Maximum Subarray/#this-problem-was-discussed-by-jon-bentley-sep-1984-vol-27-no-9-communications-of-the-acm-p885",
            "text": "the paragraph below was copied from his paper (with a little modifications)  public static int maxSubArray(int[] A) {\n    int maxSoFar=A[0], maxEndingHere=A[0];\n    for (int i=1;i<A.length;++i){\n        maxEndingHere= Math.max(maxEndingHere+A[i],A[i]);\n        maxSoFar=Math.max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n}",
            "title": "this problem was discussed by Jon Bentley (Sep. 1984 Vol. 27 No. 9 Communications of the ACM P885)"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Maximum Swap/",
            "text": "670. Maximum Swap\n\n\nGiven a non-negative integer, you could swap two digits at most once to get the maximum valued number.\nReturn the maximum valued number you could get.\n\n\nExample 1:\nInput: 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.\n\n\nExample 2:\nInput: 9973\nOutput: 9973\nExplanation: No swap.\n\n\nNote:\nThe given number is in the range [0, 108]\n\n\n/*\nIntuition:\n   \u904d\u5386\u6570\u7ec4\uff0c\u627e\u51faA[i]\u540e\u7684\u6700\u5927\u503cmax_num\uff0c\u4ee5\u53camax_num\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807index\uff0cif(max_num > A[i] && A[i] != max_num),\n   \u90a3\u4e48\u5c31\u4ea4\u6362\u4e24\u8005\uff0c\u5e76\u9000\u51fa\u5faa\u73af\uff0c\u5426\u5219\u7ee7\u7eed\u904d\u5386\u6570\u7ec4\u3002\n*/\n\npublic int maximumSwap(int num) {\n    char[] A = Integer.toString(num).toCharArray();\n     int index=0;\n     char max_num ='0',value;\n     for (int i = 0; i < A.length-1; i++) { //i<A.length-1\n         //\u627e\u51faA[i]\u540e\u9762\u7684\u6700\u5927\u503c\n         for (int j = i+1; j < A.length; j++)\n             max_num = (char) Math.max(max_num, A[j]);\n         //\u627e\u51fa\u6700\u5927\u503c\u4e0b\u6807      \n         for (int j2 = i+1; j2 < A.length; j2++)\n             if(A[j2] == max_num)\n                 index = j2;\n         //\u4e0a\u9762\u7684\u6700\u5927\u503c\u548c\u4e0b\u6807\u90fd\u5df2\u7ecf\u627e\u5230\uff0c\u73b0\u5728\u53ea\u9700\u6bd4\u8f83\u66ff\u6362\n         if(max_num > A[i] && A[i] != max_num ) {\n             value = A[i];\n             A[i] = max_num;\n             A[index] = value;\n             break;\n         }\n         max_num ='0';\n    }\n\n    return Integer.valueOf(new String(A));\n}",
            "title": "Maximum Swap"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Merge Sorted Array/",
            "text": "88. Merge Sorted Array\n\n\nGiven two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\n\nNote:\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.\n\n\npublic void merge(int[] nums1, int m, int[] nums2, int n) {\n    int j=0;\n    if(n != 0)\n        for (int i = m; i < m+n; i++)\n            nums1[i] = nums2[j++];\n    Arrays.sort(nums1);\n}",
            "title": "Merge Sorted Array"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Missing Number(\u5f02\u6216)/",
            "text": "268. Missing Number\n\n\nGiven an array containing n distinct numbers taken from 0, 1, 2, ..., n,\nfind the one that is missing from the array.\n\n\nFor example,\nGiven nums = [0, 1, 3] return 2.\n\n\nNote:\nYour algorithm should run in linear runtime complexity.\nCould you implement it using only constant extra space complexity?\n\n\n\u5927\u610f\u5c31\u662f\u5728{0, 1, 2, ..., n}\u627e\u51fa\u9057\u5931\u7684\u6570\u5b57\uff0c\u5982\u679c\u6ca1\u6709\u9057\u5931return n+1\uff1b\n\n\n//\u4e8c\u5206\u641c\u7d22\npublic int missingNumber(int[] nums) {\n    Arrays.sort(nums);\n    int min = 0, max = nums.length - 1;\n    while(min < max){\n        int mid = (min + max) / 2;\n        // \u6ca1\u9519\u4f4d\uff0c\u5728\u53f3\u8fb9\uff1b\u6709\u9519\u4f4d\uff0c\u5219\u5728\u5de6\u8fb9\n        if(mid == nums[mid]){\n            min = mid + 1;\n        } else {\n            max = mid - 1;\n        }\n    }\n    // \u5982\u679c\u6ca1\u6709\u9519\u4f4d\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u6570\u52a01\n    return nums[min] == min ? min + 1 : min;\n}\n\n/*\n\u5f02\u6216\u8fd0\u7b97:a^b^b=a;\u5f02\u6216\u4e24\u6b21\u76f8\u540c\u6570\u5b57b\uff0c\u5c06\u5f97\u5230\u539f\u6765\u6570\u5b57a\n\u8fd0\u7b97\u6cd5\u5219\uff1a1^1=0; 1^0=1; 0^0=0;(\u5f02\u6216\u662f\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26)\neg\uff1a2^3 =2(\u5341\u8fdb\u5236) -> 10^11 = 1 (\u4e8c\u8fdb\u5236)\n*/\npublic int missingNumber(int[] nums) {\n\n    int xor = 0, i = 0;\n    for (i = 0; i < nums.length; i++) {\n        xor ^= i ^ nums[i];\n    }\n\n    return xor ^ i;\n}\n\n\n//other\npublic static int missingNumber(int[] nums) {\n    int sum = nums.length;\n    for (int i = 0; i < nums.length; i++)\n        sum += i - nums[i];\n    return sum;\n}",
            "title": "Missing Number(\u5f02\u6216)"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Move Zeroes/",
            "text": "\ufeff\n283. Move Zeroes\n\n\nGiven an array nums, write a function to move all 0's to the end of it\nwhile maintaining the relative order of the non-zero elements.\nFor example, given nums = [0, 1, 0, 3, 12], after calling your function,\nnums should be [1, 3, 12, 0, 0].\n\n\nNote:\nYou must do this in-place without making a copy of the array.\nMinimize the total number of operations.\nCredits:\nSpecial thanks to @jianchao.li.fighter for adding this problem and creating all test cases.\n\n\npublic static void moveZeroes(int[] nums) {\n    int count=0,j=0;\n    for (int i = 0; i < nums.length; i++)\n        if (nums[i]==0) count++;\n    if(count>0) {\n        for (int i = 0; i < nums.length; i++)\n            if (nums[i]!=0)\n                nums[j++] = nums[i];\n        for (int i = nums.length-count; i < nums.length; i++)\n            nums[i]=0;      \n    }        \n}",
            "title": "Move Zeroes"
        },
        {
            "location": "/\u521d\u7ea7\u9898/My Calendar I/",
            "text": "729. My Calendar I\n\n\nImplement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.\n\n\nYour class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.\n\n\nA double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)\n\n\nFor each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\n\n\nYour class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)\nExample 1:\nMyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\nExplanation:\nThe first event can be booked.  The second can't because time 15 is already booked by another event.\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\n\n\n// Time Limit Exceeded\nclass MyCalendar {\n    ArrayList<Integer> list;\n    public MyCalendar() {\n       list = new ArrayList<>();\n    }\n\n    public boolean book(int start, int end) {\n        boolean status =false;\n        for (int i = start; i < end; i++)\n            if(list.contains(i))\n                status = true;\n        for (int i = start; i < end && !status; i++) {\n            list.add(i);\n        }\n        if(status)\n            return false;\n        return true;\n    }\n}\n\n//\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u6253\u7b97\u7528\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4\u6765\u9650\u5b9a\u8303\u56f4\uff0c\u7136\u540e\u4e0d\u65ad\u66f4\u65b0\uff0c\u4f46\u6ca1\u6709\u8003\u8651\u5230\u4e0d\u53ea\u53ea\u6709\u4e00\u6bb5\uff0cfail\nclass MyCalendar {\n    int []a;\n    public MyCalendar() {\n       a = new int[2];\n    }\n\n    public boolean book(int start, int end) {\n        if (a[0]==0 && a[1]==0) {\n            a[0]=start;\n            a[1]=end;\n            return true;\n        }\n        if (start>=a[1]) {\n            a[1]=end;\n            return true;\n        }\n        if (end<=a[0]) {\n            a[0]=start;\n            return true;\n        }\n            return false;\n    }\n}\n\n/*\n\u8fd8\u662f\u56de\u5f52\u5230\u539f\u5148\u7684\u601d\u8def\uff0c\u53ea\u9700\u6539\u53d8list\u7c7b\u578b\u4e3a\u6570\u7ec4\u7c7b\u578b\n\u904d\u5386list\uff0c\u5224\u65ad\uff08start\uff0cend\uff09\u662f\u5426\u5728\u5df2\u6709\u7684\u5c0f\u6570\u7ec4\u91cc\n*/\nclass MyCalendar {\n    ArrayList<Integer[]> list;\n    public MyCalendar() {\n       list = new ArrayList<>();\n    }\n\n    public boolean book(int start, int end) {\n        for(Integer[] x:list) {\n            if(x[0]<end && start<x[1])\n                return false;\n        }\n        list.add(new Integer[] {start,end});\n        return true;\n    }\n}\n\n\n\n\n/*\n\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n \n/",
            "title": "My Calendar I"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Non-decreasing Array/",
            "text": "665. Non-decreasing Array\n\n\nGiven an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.\n\n\nWe define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).\n\n\nExample 1:\nInput: [4,2,3]\nOutput: True\nExplanation: You could modify the first\n4\n to\n1\n to get a non-decreasing array.\n\n\nExample 2:\nInput: [4,2,1]\nOutput: False\nExplanation: You can't get a non-decreasing array by modify at most one element.\n\n\nNote: The n belongs to [1, 10,000].\n\n\n/*\n    \u6211\u539f\u5148\u7684\u60f3\u6cd5\u5c31\u662f\u5185\u5916\u4e24\u5c42\u5faa\u73af\u904d\u5386\u8bbf\u95ee\u6570\u7ec4\uff0c\u627e\u51fa\u4e0d\u7b26\u5408\u8fd9\u4e00\u6761\u4ef6\uff08array[i] <= array[i + 1]\uff09\u7684\u503c\uff0c\u5e76count++\uff1b\u5f53count>1\u65f6\uff0c\u90a3\u4e48\u5c31\u8fd4\u56defalse\uff0c\n\u4f46\u4ee3\u7801\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u5e76\u4e0d\u80fd\u987e\u5168\u6240\u6709\u7684\u60c5\u51b5\uff0c\u6ca1\u80fdAC\uff1b\n    \u540e\u6765\u53c2\u8003\u4e86\u4e0b\u522b\u4eba\u7684code \uff0c\u53d1\u73b0\u4e8b\u60c5\u6ca1\u90a3\u4e48\u7b80\u5355\uff0c\u5f53array[i-1] > array[i]\u65f6\uff0c\u6211\u4eec\u4f7farray[i-1] = array[i]\uff0c\n\u4f46\u8fd9\u6837\u5982\u679carray[i-2]\u4e0d\u6ee1\u8db3\u5c0f\u4e8earray[i]\uff0c\u5c31\u884c\u4e0d\u901a\u4e86\uff0c\u6240\u4ee5\u5c31\u8981\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u4e86\uff0cif(nums[i-2] <= nums[i]) \u6211\u4eec\u5c31\u53ef\u4ee5\u4f7farray[i-1] = array[i]\uff0c\nelse\uff0c\u6211\u4eec\u6267\u884carray[i] = array[i-1]\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5c31\u662f\u4f7f\u7ed3\u679c\u8fd4\u56defalse\uff1b\n*/\n\npublic boolean checkPossibility(int[] nums) {\n    int count=0;        //\u8bb0\u5f55\u662f\u5426\u53ea\u9700\u6700\u591a\u4e00\u4e2a\u4fee\u6539\u5c31\u4f7f\u6570\u7ec4\u7b26\u5408Non-decreasing Array\n    for (int i = 1;i <nums.length && count <=1 ;++i ) {\n            if (nums[i-1] > nums[i]) {\n                count++;\n    //i-2\u8868\u793a\u6570\u7ec4\u524d\u4e24\u4e2a\u53ea\u9700\u8fdb\u884cnums[i-1] = nums[i]\u64cd\u4f5c\uff1b\u5982\u679c\u6ca1\u6709\u8be5\u6761\u4ef6\uff0c\u540e\u7eed\u4e0d\u7ba1\u6570\u7ec4\u5143\u7d20\u5927\u5c0f\u5982\u4f55\uff0cnums[i] > nums[i-1]\u4f1a\u4e00\u76f4\u5b58\u5728\n                if(i-2< 0 || nums[i-2] <= nums[i])  \n                    nums[i-1] = nums[i];\n                else\n                    nums[i] = nums[i-1];\n            }\n        }\n    return count<=1;\n}",
            "title": "Non decreasing Array"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Palindrome Number/",
            "text": "9. Palindrome Number\n\n\nDetermine whether an integer is a palindrome. Do this without extra space.\n\n\n//\u5229\u7528\u6808\npublic boolean isPalindrome(int x) {\n    if(x<0)\n        return false;\n    LinkedList<Integer> palindrome = new LinkedList<>();\n    int y = x;\n    while(x != 0){\n        palindrome.push(x%10);\n        x = x/10;\n    }\n\n    while(y != 0 && ! palindrome.isEmpty()){\n        if(y%10 != palindrome.pop())\n            return false;\n        y = y/10;\n    }\n    return true;\n}\n\n\n//\u5c06x\u8f6c\u6362\u4e3achar\u6570\u7ec4\npublic boolean isPalindrome(int x) {\n    if(x<0)\n        return false;\n    char [] sum = Integer.toString(x).toCharArray();\n    int i=0,j=sum.length-1;\n    while(i<j){\n        if(sum[i] != sum[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
            "title": "Palindrome Number"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Pascal's Triangle/",
            "text": "118. Pascal's Triangle\n\n\nGiven numRows, generate the first numRows of Pascal's triangle.\n\n\nFor example, given numRows = 5,\nReturn\n\n\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\n\n\n//\u8be5\u9898\u7b97\u662f\u4e2d\u7b49\u96be\u5ea6\uff0c\u4e3b\u8981\u8003\u5bdf\u5bf9List\u7684\u4f7f\u7528\uff0c\u6700\u53eb\u4eba\u62cd\u624b\u53eb\u7edd\u5728\uff1a\nj<row.size()-1\n\n\npublic List<List<Integer>> generate(int numRows) {\n    List<List<Integer>> allrows = new ArrayList<List<Integer>>();\n    ArrayList<Integer> row = new ArrayList<Integer>();\n    for(int i=0;i<numRows;i++)\n    {\n        row.add(0, 1);\n        for(int j=1;j<row.size()-1;j++)\n            row.set(j, row.get(j)+row.get(j+1));\n        allrows.add(new ArrayList<Integer>(row));\n    }\n    return allrows;\n}\n\n\n\n119. Pascal's Triangle II\n\n\nGiven an index k, return the kth row of the Pascal's triangle.\n\n\nFor example, given k = 3,\nReturn [1,3,3,1].\n\n\nNote:\nCould you optimize your algorithm to use only O(k) extra space?\n\n\npublic List<Integer> getRow(int rowIndex) {\n    List<Integer> row = new ArrayList<Integer>();\n    for (int i = 0; i <= rowIndex; i++) {\n        row.add(0,1);\n        for (int j = 1; j < row.size()-1; j++)\n            row.set(j,row.get(j) + row.get(j+1));\n    }\n    return row;\n}",
            "title": "Pascal's Triangle"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Reshape the Matrix/",
            "text": "566. Reshape the Matrix\n\n\nIn MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different\nsize but keep its original data.You're given a matrix represented by a two-dimensional array, and two positive integers r and c\nrepresenting the row number and column number of the wanted reshaped matrix, respectively.\nThe reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise,\noutput the original matrix.\n\n\nExample 1:\nInput:\nnums =\n[[1,2],\n [3,4]]\nr = 1, c = 4\nOutput:\n[[1,2,3,4]]\nExplanation:\nThe row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\nExample 2:\nInput:\nnums =\n[[1,2],\n [3,4]]\nr = 2, c = 4\nOutput:\n[[1,2],\n [3,4]]\nExplanation:\nThere is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\nNote:\nThe height and width of the given matrix is in range [1, 100].\nThe given r and c are all positive.\n\n\nclass Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int [][] snums = new int [r][c];\n        int [] a = new int [nums.length*nums[0].length];//\u4ee3\u8868\u884c\u548c\u5217\n         //\u5c06\u4e8c\u7ef4\u6570\u7ec4nums[][]\u6309\u884c\u6570\u8f6c\u6362\u4e3a\u4e00\u7ef4\u6570\u7ec4a[]\n         for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums[0].length; j++) {\n                a[i*nums[0].length + j] = nums[i][j];\n            }\n        }\n\n         //\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u60c5\u51b5\n         if (r*c > nums.length * nums[0].length) {\n            return nums;\n        }else {\n            for (int i = 0; i < r; i++) {\n                for (int j = 0; j < c; j++) {\n                    snums[i][j] = a[i*c + j];\n                }\n            }\n        }\n         return snums;\n    }\n}",
            "title": "Reshape the Matrix"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Reverse Integer/",
            "text": "7. Reverse Integer\n\n\nReverse digits of an integer.\n\n\nExample1: x = 123, return 321\nExample2: x = -123, return -321\n\n\nIf the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.\nDid you notice that the reversed integer might overflow? Assume the input is a 32-bit integer,\nthen the reverse of 1000000003 overflows. How should you handle such cases?\nFor the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n\n\nNote:\nThe input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.\n\n\n//\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6ce8\u610f\u4e0a\u9762\u7684\u4e00\u4e9b\u8d1f\u6570\u548c\u8d85\u8303\u56f4\u6570\u7684\u5904\u7406\uff0c\u7136\u540e\u95ee\u9898\u5c31\u53ea\u662f\u6570\u5b57\u4e0e\u5b57\u7b26\u7684\u8f6c\u6362\npublic int reverse(int x) {\n    int value=0,j=0;\n    char [] sum = Integer.toString(x).toCharArray();\n\n    for (int i = 0; i < sum.length; i++) {\n        if(sum[i] == '-')\n            continue;       \n\n        value += (sum[i] - '0') * Math.pow(10, j++);\n    }\n    if(value == 2147483647)\n        return 0;\n\n    if (x < 0)\n        value = - value;\n\n    return value;\n}\n\n//\u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fd0\u7528\u6570\u5b66\u8fd0\u7b97\u7b26 ' % \u548c / ' \u7684\u7279\u70b9\uff0c\u8fd9\u6837\u5c31\u663e\u5f97\u66f4\u7b80\u5355\u66f4\u6709\u6548\u7387\u3002\npublic int reverse(int x) {\n    long value = 0;\n    while(x != 0){\n        value = value*10 + x%10;\n        x = x/10;\n        if(value> Integer.MAX_VALUE || value < Integer.MIN_VALUE)\n            return 0;                \n    }\n    return (int)value;    \n}",
            "title": "Reverse Integer"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Rotate Array/",
            "text": "189. Rotate Array\n\n\nRotate an array of n elements to the right by k steps.\nFor example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].\n\n\nNote:\nTry to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\n\n\n/*\nIntuition:\n   \u9898\u76ee\u7684\u610f\u601d\u5c31\u662f\u5c06\u6700\u540e\u4e00\u4f4d\u79fb\u52a8\u5230\u7b2c\u4e00\u4f4d\uff0c\u79fb\u52a8\u7684\u6b21\u6570\u4e3ak\uff0c\u76f4\u63a5\u5237\n*/\n//Time complexity : O(n*k); Space complexity : O(1); \u663e\u7136\u6548\u7387\u4e0d\u9ad8\n public void rotate(int[] nums, int k) {\n    int len = nums.length;\n    int value, j =0 ;\n    k %= len;\n    while(j != k) {\n        value = nums[len-1];\n        //\u6240\u4ee5\u6570\u503c\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n        for (int j2 = len-1; j2 > 0; j2--)\n            nums[j2]=nums[j2-1];\n\n        nums[0] = value;\n        ++j;\n    }\n\n}\n\n\n\n/*\n\u9996\u5148\u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4nums\uff0c\u7136\u540e\u53cd\u8f6cnums(0,k-1)\uff0c\u6700\u540e\u53cd\u8f6cnums(k, len-1)\nTime complexity : O(n); Space complexity : O(1);\n*/\n\npublic class Solution {\n    public void rotate(int[] nums, int k) {\n        k %= nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n    public void reverse(int[] nums, int start, int end) {\n        while (start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}",
            "title": "Rotate Array"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Search Insert Position/",
            "text": "\ufeff\n35. Search Insert Position\n\n\nGiven a sorted array and a target value, return the index if the target is found. If not, return the index where\nit would be if it were inserted in order.\nYou may assume no duplicates in the array.\n\n\nHere are few examples.\n[1,3,5,6], 5 \u2192 2\n[1,3,5,6], 2 \u2192 1\n[1,3,5,6], 7 \u2192 4\n[1,3,5,6], 0 \u2192 0\n\n\n\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n        //\u67e5\u627etarget\u8bb0\u5f55\u4f4d\u7f6e\n        int status=Arrays.binarySearch(nums, target);\n\n        //\u5982\u679ctarget\u4e0d\u5728\u6570\u7ec4\u5185\uff0c\u5219\u63d2\u5165\u5230\n        if(status<0) {\n            for (int i = 0; i < nums.length; i++){\n                if (target<nums[i]) {\n                    status=i;\n                    break;\n                }\n            }\n\n            if(target > nums[nums.length-1])status=nums.length;\n        }\n\n        return status;\n    }\n}",
            "title": "Search Insert Position"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Search for a Range\uff08List\u8f6c\u4e3aint\uff09/",
            "text": "34. Search for a Range\n\n\nGiven an array of integers sorted in ascending order, find the starting and ending position of a given target value.\n\n\nYour algorithm's runtime complexity must be in the order of O(log n).\n\n\nIf the target is not found in the array, return [-1, -1].\n\n\nFor example,\nGiven [5, 7, 7, 8, 8, 10] and target value 8,\nreturn [3, 4].\n\n\u9898\u610f\uff1a\n\n        \u627e\u5230\u6570\u7ec4nums\u4e2d\u503c\u7b49\u4e8etarget\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\n\n\npublic int[] searchRange(int[] nums, int target) {\n        int a[]={-1,-1};\n        int i = 0, j = nums.length-1;\n        boolean status1 = false,status2 = false;\n        while((!status1 || !status2) && i<=j){\n            if(nums[i] != target)\n                ++i;\n            else\n                status1 =true;\n\n            if(nums[j] != target)\n                --j;\n            else\n                status2 =true;\n        }\n        if(i<=j && status1){\n            a[0] = i;\n            a[1] = j;\n        }\n        return a;\n    }\n/*\nList\u8f6c\u4e3aint(\u62d3\u5c55)\nLinkedList<Integer> linkedList = new LinkedList<>();\n        int []a = new int[linkedList.size()];\n        for (int i = 0; i < linkedList.size(); i++)\n            a[i] = linkedList.get(i);\n\n\nInteger []a = new Integer[set.size()];\n        set.toArray(a);\n*/",
            "title": "Search for a Range\uff08List\u8f6c\u4e3aint\uff09"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Shortest Unsorted Continuous Subarray/",
            "text": "\ufeff\n581. Shortest Unsorted Continuous Subarray\n\n\nGiven an integer array, you need to find one continuous subarray that if you only sort\nthis subarray in ascending order, then the whole array will be sorted in ascending order, too.\nYou need to find the shortest such subarray and output its length.\n\n\nExample 1:\nInput: [2, 6, 4, 8, 10, 9, 15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array\nsorted in ascending order.\nNote:\nThen length of the input array is in range [1, 10,000].\nThe input array may contain duplicates, so ascending order here means <=.\n\n\n/*\n(1)\u60f3\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u521a\u5f00\u59cb\u5c31\u60f3\u592a\u590d\u6742\u4e86\uff0c\u539f\u5148\u7684\u601d\u8def\u662f\u590d\u5236\u6570\u7ec4nums[]\u5e76sort()\u6210snums[]\uff0c\n\u7136\u540e\u904d\u5386\u6570\u7ec4nums[],\u6bd4\u8f83nums[i]\u548csnums[i]\u7684\u503c\uff0c\u5982\u679c\u4e0d\u540c\u5219\u8df3\u8f6c\u5230nums[i]\u5728snums[i]\u6240\u5728\u4f4d\u7f6e,\u4f9d\u6b21\u7c7b\u63a8\u3002\n*/\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int b[] =new int[nums.length];\n         int variable=0,len=0;\n         for (int i = 0; i < nums.length; i++) {\n            b[i]=nums[i];\n        }\n\n         Arrays.sort(b);\n\n         for (int i = 0; i < nums.length; i++) {\n                if(b[i]==nums[i]) ++variable;\n                else break;\n            }\n         if (variable==nums.length) variable=1;\n        int j=0,count;//j\uff1a\u7d22\u5f15\u53f7\n         //\u904d\u5386\u6570\u7ec4a[],\u6bd4\u8f83\u4e24\u503c\n         for (int i = 0; i < nums.length; ++i) {\n             //\u4e3a\u4ec0\u4e48int i=j\uff0cj\u7684\u503c\u4e0d\u80fd\u4f20\u9012\u7ed9i\uff1f\n                if (nums[i] >=b[i]) {\n                    count=0;\n                    for (int k = 0; k < b.length; k++) {\n                        if(nums[i]==b[k])count++;\n                    }\n                    count=count-1;\n                    if(nums[nums.length-1]==nums[nums.length-2])count=count-1;\n                    i=Arrays.binarySearch(b, nums[i])+count;\n                    j=i;\n                }\n            }\n         len=j+1-variable;\n         return len;\n    }\n}\n\n\n\n\n/\n\n(2)\u4f46\u5b9e\u8df5\u540e\uff0c\u5f88\u663e\u7136\u8fd9\u6837\u7684\u601d\u8def\u5e76\u4e0d\u62bd\u8c61\uff0c\u5b9e\u73b0\u8fc7\u7a0b\u5f88\u9ebb\u70e6\uff0c\u4e0d\u80fd\u987e\u5168\u6240\u6709\u6570\u636e\uff0c\u800c\u4e14\u5f88\u8017\u65f6\u95f4\uff0c\u7ed3\u679c\u4e5f\u662f\u9519\u8bef\u7684\uff0c\n\u53ea\u80fd\u88ab\u8feb\u653e\u5f03\uff0c\u540e\u6765\u53c2\u8003\u4e0b\u4e86\u522b\u4eba\u7684\u601d\u8def\uff0c\u8fd8\u662f\u592anaive\u4e86\u3002\n\u601d\u8def\uff1a\u590d\u5236\u6570\u7ec4nums[]\u5e76sort()\u6210snums[]\uff0c\u6bd4\u8f83\u4e24\u4e2a\u6570\u7ec4\u4e0d\u540c\u7684\u503c\uff0c\u5e76\u8bb0\u4e0b\u6700\u5148\u7684\u4e0d\u540c\u503c\u7684\u7d22\u5f15\u53f7\uff1astart\uff1b\n\u548c\u6700\u540e\u7684\u4e0d\u540c\u503c\u7684\u7d22\u5f15\u53f7\uff1aend\uff1b\u6700\u540ereturn (end - start >= 0 ? end - start + 1 : 0);\n\n/\n\n\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int[] snums = nums.clone();\n        Arrays.sort(snums);\n        int start = snums.length, end = 0;\n        for (int i = 0; i < snums.length; i++) {\n            if (snums[i] != nums[i]) {\n                start = Math.min(start, i);\n                end = Math.max(end, i);\n            }\n        }\n        return (end - start >= 0 ? end - start + 1 : 0);\n    }\n}",
            "title": "Shortest Unsorted Continuous Subarray"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Subarray Sum Equals K/",
            "text": "560. Subarray Sum Equals K\n\n\nGiven an array of integers and an integer k, you need to find\nthe total number of continuous subarrays whose sum equals to k.\n\n\nExample 1:\nInput:nums = [1,1,1], k = 2\nOutput: 2\n\n\npublic int subarraySum(int[] nums, int k) {\n    int count=0,sum=0;\n    for (int i = 0; i < nums.length; i++) {\n        sum=nums[i];\n        if(sum==k)\n            count++;\n        for (int j = i+1; j < nums.length; j++) {\n            sum+=nums[j];\n            if (sum==k) {\n                count++;\n                continue;\n            }\n        }\n    }\n    return count;\n}",
            "title": "Subarray Sum Equals K"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Third Maximum Number/",
            "text": "\ufeff\n414. Third Maximum Number\n\n\nGiven a non-empty array of integers, return the third maximum number in this array.\nIf it does not exist, return the maximum number. The time complexity must be in O(n).\n\n\nExample 1:\nInput: [3, 2, 1]\nOutput: 1\nExplanation: The third maximum is 1.\n\n\nExample 2:\nInput: [1, 2]\nOutput: 2\nExplanation: The third maximum does not exist, so the maximum (2) is returned instead.\n\n\nExample 3:\nInput: [2, 2, 3, 1]\nOutput: 1\nExplanation: Note that the third maximum here means the third maximum distinct number.\nBoth numbers with value 2 are both considered as second maximum.\n\n\npublic int thirdMax(int[] nums) {\n        Arrays.sort(nums);\n        int count=0,value=nums[0];\n\n        if (nums.length<3) {\n\n            for (int i = 0; i < nums.length; i++)\n                value=Math.max(value, nums[i]);\n\n        }else {\n\n            for (int i = nums.length-1; i > 0; i--) {\n                if (nums[i]>nums[i-1]) {\n                    count++;\n                    if (count==2) {\n                        value=nums[i-1];\n                        break;\n                    }\n                }\n            }\n            if(count<2)\n                value=nums[nums.length-1];\n        }\n\n        return value;\n    }",
            "title": "Third Maximum Number"
        },
        {
            "location": "/\u521d\u7ea7\u9898/Two Sum II/",
            "text": "167. Two Sum II - Input array is sorted\n\n\nGiven an array of integers that is already sorted in ascending order, find two numbers such that\nthey add up to a specific target number.The function twoSum should return indices of the two numbers\nsuch that they add up to the target, where index1 must be less than index2.\nPlease note that your returned answers (both index1 and index2) are not zero-based.\n\n\nYou may assume that each input would have exactly one solution and you may not use the same element twice.\n\n\nInput: numbers={2, 7, 11, 15}, target=9\nOutput: index1=1, index2=2\n\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u5566\uff0c\u6211TM\u521a\u5f00\u59cb\u5728for\u5faa\u73af\u91cc\u628a numbers.length-1 \u5199\u6210 num.length-1;\n\u6d6a\u8d39\u4e86\u597d\u591a\u65f6\u95f4\uff0c\u6572\u4ee3\u7801\u8fd8\u662f\u8981\u7ec6\u5fc3\n\n\npublic int[] twoSum(int[] numbers, int target) {\n    int []num = new int[2];\n    int value;\n    for (int i = 0; i < numbers.length-1; i++) {\n        value = target - numbers[i];\n        if (Arrays.binarySearch(numbers,i+1,numbers.length,value) >i) {\n            num[0] = i+1;\n            num[1] = Arrays.binarySearch(numbers,i+1,numbers.length, value)+1;\n            break;\n        }\n    }\n    return num;\n}",
            "title": "Two Sum II"
        },
        {
            "location": "/\u6808/Implement Queue using Stacks/",
            "text": "232. Implement Queue using Stacks\n\n\nImplement the following operations of a queue using stacks.\n\n\npush(x) -- Push element x to the back of queue.\npop() -- Removes the element from in front of queue.\npeek() -- Get the front element.\nempty() -- Return whether the queue is empty.\n\n\nclass MyQueue {\n    ArrayDeque< Integer> queue = new ArrayDeque<>();\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        queue.offer(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        int e = queue.peek();\n        queue.poll();\n        return e;\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        return queue.peek();\n    }\n\n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return queue.isEmpty();\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */",
            "title": "Implement Queue using Stacks"
        },
        {
            "location": "/\u6808/Implement Stack using Queues/",
            "text": "225. Implement Stack using Queues\n\n\nImplement the following operations of a stack using queues.\n\n\n- push(x) -- Push element x onto stack.\n- pop() -- Removes the element on top of the stack.\n- top() -- Get the top element.\n- empty() -- Return whether the stack is empty.\n\n\n\nNotes:\n    - You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.\n    - Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.\n    - You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).\n\n\nclass MyStack {\n    private Queue<Integer> q1 = new LinkedList<>();\n    private Queue<Integer> q2 = new LinkedList<>();\n    private int top;\n\n    /** Initialize your data structure here. */\n    // public MyStack() {\n    // }\n\n    /** Push element x onto stack. */\n    public void push(int x) {\n        q1.offer(x);\n        top = x;\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n        while (q1.size() > 1) {\n        top = q1.remove();\n        q2.add(top);\n        }\n        int e=q1.remove();\n        Queue<Integer> temp = q2;\n        q2 = q1;\n        q1 = temp;\n        return e;\n    }\n\n    /** Get the top element. */\n    public int top() {\n        return top;\n    }\n\n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n        return q1.isEmpty();\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */",
            "title": "Implement Stack using Queues"
        },
        {
            "location": "/\u6808/Min Stack/",
            "text": "155. Min Stack\n\n\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\n\npush(x) -- Push element x onto stack.\npop() -- Removes the element on top of the stack.\ntop() -- Get the top element.\ngetMin() -- Retrieve the minimum element in the stack.\nExample:\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --> Returns -3.\nminStack.pop();\nminStack.top();      --> Returns 0.\nminStack.getMin();   --> Returns -2.\n\n\n//Java\nclass MinStack {\n    Stack<Integer> stack = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n\n    public void push(int x) {\n        stack.push(x);\n        if(stack2.isEmpty() || x<=getMin())\n            stack2.push(x);\n\n\n    }\n\n    public void pop() {\n        int e = stack.pop();\n        if(e == getMin())\n            stack2.pop();\n    }\n\n    public int top() {\n        return stack.peek();\n    }\n\n    public int getMin() {\n        return stack2.peek();\n    }\n}\n\n//\u4e0b\u9762\u662f\u6548\u7387\u66f4\u9ad8\u7684c++\u4ee3\u7801\uff0c\u601d\u8def\u4e00\u6837\nclass MinStack {\nprivate:\n    stack<int> s1;\n    stack<int> s2;\npublic:\n    void push(int x) {\n        s1.push(x);\n        if (s2.empty() || x <= getMin())  s2.push(x);       \n    }\n    void pop() {\n        if (s1.top() == getMin())  s2.pop();\n        s1.pop();\n    }\n    int top() {\n        return s1.top();\n    }\n    int getMin() {\n        return s2.top();\n    }\n};",
            "title": "Min Stack"
        },
        {
            "location": "/\u6808/Next Greater Element I/",
            "text": "496. Next Greater Element I\n\n\nYou are given two arrays (without duplicates) nums1 and nums2 where nums1\u2019s elements\n are subset of nums2. Find all the next greater numbers for nums1's elements in the\n  corresponding places of nums2.\nThe Next Greater Number of a number x in nums1 is the first greater number to its \nright in nums2. If it does not exist, output -1 for this number.\n\n\n\u9898\u610f\n\uff1a\n    \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff08\u6ca1\u6709\u91cd\u590d\uff09nums1 \u548c nums2 ,nums1 \u662fnums2\u7684\u5b50\u96c6\u3002\n    \u627e\u5230nums1\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5728nums2\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6bd4\u5176\u5927\u7684\u503c\u3002\n    nums1\u4e2d\u7684x\u7684\u4e0b\u4e00\u4e2a\u5927\u7684\u503c\u662f\u8be5\u6570\u5b57x\u5728nums2\u4e2d\uff0c\u53f3\u8fb9\u7684\u6bd4\u5176\u5927\u7684\u4e00\u4e2a\u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de-1\u3002\n\n\n//\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\npublic static int[] nextGreaterElement(int[] nums1, int[] nums2) {\n    int a[] =new int[nums1.length];\n    int k =0 ,status=0;\n\n    for (int i = 0; i < nums1.length; i++) {\n        status = 0;\n\n        for (int j = 0; j < nums2.length; j++) \n            if(nums1[i] == nums2[j]) \n                for (int j2 = j; j2 < nums2.length; j2++) \n                    if(nums2[j2] > nums1[i]) {\n                        a[k++] = nums2[j2];\n                        status = -1;\n                        break;\n                    }\n\n        if(status==0) \n            a[k++]=-1;  \n    }\n    return a;\n}",
            "title": "Next Greater Element I"
        },
        {
            "location": "/\u6808/Next Greater Element II (System.arraycopy)/",
            "text": "503. Next Greater Element II\n\nGiven a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\nExample 1:\nInput: [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number; \nThe second 1's next greater number needs to search circularly, which is also 2.\n\n\n//\u9898\u610f\uff1a\u4ece\u6570\u7ec4\u4e2d\u4ece\u5de6\u5230\u53f3\u627e\u5230\u6bd4sum[i]\u5927\u7684\u503c\n\npublic static int[] nextGreaterElements(int[] nums) {\n    int []a =new int[nums.length];\n    int k = 0, status;\n\n    for (int i = 0; i < nums.length-1; i++) {\n        status = 0;\n//          \u7b2c\u4e00\u904dfor\uff0c\u7b5b\u9009sum[i]\u540e\u7684\u503c\n        for (int j = i+1; j < nums.length; j++) \n        if(nums[j] > nums[i]) {\n            status = 1;\n            a[k++] = nums[j];\n            break;\n        }\n//          \u7b2c\u4e8c\u904d\uff0c\u7b5b\u9009sum[i]\u524d\u7684\u503c\n        for (int j = 0; j < i && status==0; j++) \n            if(nums[j] > nums[i]) {\n                status = 1;\n                a[k++] = nums[j];\n                break;\n            }\n\n//          \u5982\u679c\u90fd\u627e\u4e0d\u5230\uff0c\u90a3\u5c31\u662f-1\n        if(status == 0)\n            a[k++] = -1;\n    } \n    status = 0;\n//        \u5bf9\u6700\u540e\u7684\u4e00\u4e2a\u6570\u8fdb\u884c\u5904\u7406\n    for (int i = 0; i < nums.length-1; i++) \n        if(nums[i] > nums[nums.length-1]) {\n            status = 1;\n            a[k++] = nums[i];\n            break;\n        }\n    if (status == 0 && nums.length != 0) \n        a[k++] = -1;\n\n    return a;   \n}\n\n\n\n\u4ee3\u7801\u4e0d\u591f\u7b80\u6d01\uff0c\u6211\u4f7f\u7528System.arraycopy\uff08\uff09\uff0c\u6784\u9020doublenums[]\n\u5305\u542b\u4e24\u4e2anums\u6570\u636e,\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u56de\u5934\u6765\u5224\u65ad\u6570\u7ec4\u524d\u9762\u7684\u503c\u4e86\n\n\npublic int[] nextGreaterElements(int[] nums) {\n    int []a =new int[nums.length];\n    int []doublenums = new int[2*nums.length];\n    System.arraycopy(nums, 0, doublenums, 0, nums.length);\n    System.arraycopy(nums, 0, doublenums, nums.length, nums.length);\n\n    int k = 0, status;\n    for (int i = 0; i < nums.length; i++) {\n        status = 0;\n        for (int j = i+1; j < doublenums.length; j++) \n            if(doublenums[j] > nums[i]) {\n                status = 1;\n                a[k++] = doublenums[j];\n                break;\n            }\n        if(status == 0)\n            a[k++] = -1;\n    }\n\n    return a;   \n}\n\n\n\n\u4e0a\u9762\u6548\u7387\u4e0d\u9ad8\uff0c\u7a7a\u95f4\u548c\u65f6\u95f4\u90fd\u662fO(n^2)\uff0c\u800c\u4e14\u8c03\u7528System.arraycopy\u4e5f\u4f1a\u8017\u8d39\u4e00\u4e9b\u65f6\u95f4\uff0c\n\u8ba9\u6211\u4eec\u6765\u4f18\u5316\u4e0b\uff0c\u53ef\u4ee5\u7528\u6570\u5b66\u8868\u8fbe\u5f0f j%nums.length \u6765\u4ee3\u66ffdoublenums\u7684\u4f5c\u7528\n\n\npublic int[] nextGreaterElements(int[] nums) {\n    int []a =new int[nums.length];\n\n    int k = 0, status;\n    for (int i = 0; i < nums.length; i++) {\n        status = 0;\n        for (int j = i+1; j < 2*nums.length; j++) \n            if(nums[j%nums.length] > nums[i] && j%nums.length != i ) {\n                status = 1;\n                a[k++] = nums[j%nums.length];\n                break;\n            }\n        if(status == 0)\n            a[k++] = -1;\n    }\n\n    return a;   \n}\n\n\n\n\u4e0a\u9762\u6548\u7387\u6ca1\u63d0\u9ad8\u591a\u5c11\uff0c\u53ea\u662f\u5c11\u7528\u4e86\u4e00\u4e2a\u7a7a\u95f4,\u8ba9\u6211\u4eec\u4f7f\u7528stack\u6765\u63d0\u9ad8\u6548\u7387\n\n\u601d\u8def\n\uff1a\n    \u6784\u5efa\u6808stack\uff0cnums\u4ece i = 2*nums.length-1\uff08\u5012\u7740\u6765\uff0c\u4e5f\u662f\u96be\u60f3\u5230\u7684\u987a\u7740\u6765\u5c31\u4e0d\u884c\u4e86\uff09\n    \u5f00\u59cb\u5faa\u73af\u8fdb\u884c\u5982\u4e0b\u52a8\u4f5c\u8fdb\u6808\uff1a\n    \uff081\uff09\uff1a\u8fdb\u6808\u524d\u5224\u65adnums[i]\u662f\u5426\u5927\u4e8estack.peek()\uff0c\u6ca1\u6709\u7684\u8bdd\uff0c\n    \u5c06\u5176Next Greater Element \u8bbe\u7f6e\u4e3astack.peek()\uff0c\u7136\u540e\u5165\u6808\uff1b\n    \uff082\uff09\uff1a\u5927\u4e8e\u7684\u8bdd\uff0c\u5219stack.pop()\uff0c\u76f4\u5230\u4e0d\u5927\u4e8e\u6216\u8005\u4e3a\u7a7a\u3002\n    \u5c06\u5176Next Greater Element \u8bbe\u7f6e\u4e3astack.peek()\uff0c\u7a7a\u7740\u8bbe\u7f6e\u4e3a-1\uff0c\u7136\u540e\u5165\u6808\uff1b\n\n\npublic static int[] nextGreaterElements(int[] nums) {\n    int []a =new int[nums.length];\n    Stack<Integer> stack = new Stack<>();\n    for (int i = 2*nums.length-1; i > 0; i--) {\n        if(stack.isEmpty()) {\n            stack.push(nums[i%nums.length]);\n            a[i%nums.length] = -1;\n            continue;\n        }\n        if(nums[i%nums.length] < stack.peek()) {\n            a[i%nums.length] = stack.peek();\n            stack.push(nums[i%nums.length]);\n        }\n        if(nums[i%nums.length] >= stack.peek()) {\n            while(!stack.isEmpty() && nums[i%nums.length] >= stack.peek())\n                stack.pop();\n            if(stack.isEmpty())\n                a[i%nums.length] = -1;\n            else \n                a[i%nums.length] = stack.peek();\n\n            stack.push(nums[i%nums.length]);\n\n        }\n    }\n\n    return a;   \n}\n\n\n\n\u601d\u8def\u5f88\u597d\uff0c\u4f46\u662f\u5b9e\u73b0\u8fc7\u7a0b\u592a\u591aif\u8bed\u53e5\u3002\u6548\u7387\u592a\u4f4e\uff0c\u7ee7\u7eed\u6539\u8fdb\n\u5c06\u4e09\u79cd\u60c5\u51b5\u6574\u5408\uff0c\n\u5f53!stack.isEmpty() && nums[i%nums.length\u65f6\uff0c\u53ea\u6267\u884cstack.pop()\uff1b\n\u5176\u4ed6\u4e24\u79cd\u53d8\u6210\u4e00\u4e2aa>b?a:b\u8868\u8fbe\u5f0f;\n\u6700\u540e\u90fd\u6267\u884c stack.push(nums[i%nums.length]);\n\n\npublic static int[] nextGreaterElements(int[] nums) {\n    int []a =new int[nums.length];\n    Stack<Integer> stack = new Stack<>();\n    for (int i = 2*nums.length-1; i >=0; i--) {\n         while(!stack.isEmpty() && nums[i%nums.length] >= stack.peek())\n             stack.pop();\n         a[i%nums.length]=  stack.isEmpty()? -1:stack.peek();\n         stack.push(nums[i%nums.length]);\n    }\n\n    return a;   \n}",
            "title": "Next Greater Element II (System.arraycopy)"
        },
        {
            "location": "/\u6808/Simplify Path/",
            "text": "71. Simplify Path\n\n\nGiven an absolute path for a file (Unix-style), simplify it.\nFor example,\npath = \"/home/\", => \"/home\"\npath = \"/a/./b/../../c/\", => \"/c\"\n\n\n\u9898\u610f\uff1a\n\n\n\".\"\u8868\u793a\u5f53\u524d\u76ee\u5f55\uff1b \"..\"\u8868\u793a\u4e0a\u7ea7\u76ee\u5f55\n\n\n\nclass Solution {\n    public String simplifyPath(String path) {\n       ArrayDeque<String> stack = new ArrayDeque<>();\n        String []sum = path.split(\"/\");\n        for (int i = 0; i < sum.length; i++) \n            if(!sum[i].equals(\"\") && sum[i].equals(\"..\") && !stack.isEmpty())\n                stack.pop();\n            else if(!sum[i].equals(\"\") && !sum[i].equals(\".\") && !sum[i].equals(\"..\"))\n                stack.push(sum[i]);\n\n        String value=\"\";\n        if(stack.isEmpty())\n            value = \"/\";\n        while(!stack.isEmpty()) {\n            value = \"/\"+stack.pop()+value;\n        }\n\n        return value;\n    }\n}",
            "title": "Simplify Path"
        },
        {
            "location": "/\u6808/Valid Parentheses/",
            "text": "20. Valid Parentheses\n\n\nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nThe brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n\n\n\npublic boolean isValid(String s) {\n    char []sum=s.toCharArray();\n    LinkedList<Character> stack = new LinkedList<>();\n    for (int i = 0; i < sum.length; i++) {\n        if(stack.isEmpty())\n            stack.push(sum[i]);\n        else if(sum[i] == stack.peek()+1 || sum[i] == stack.peek()+2)\n            stack.pop();\n        else\n            stack.push(sum[i]);\n    }\n    if(stack.isEmpty())\n        return true;\n    else \n        return false;\n}",
            "title": "Valid Parentheses"
        },
        {
            "location": "/DFS/Minimum Depth of Binary Tree/",
            "text": "111. Minimum Depth of Binary Tree\n\n\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n\n\u9898\u610f\uff1a\u6c42\u6811\u7684\u6700\u6d45\u6df1\u5ea6\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\n\n\n\u601d\u8def\n\uff1a\n    \u4e0e\u7b97\u6811\u7684\u6df1\u5ea6\u601d\u8def\u4e00\u6837\uff0c\u9700\u8981\u5904\u7406\u7684\u662f\u5355\u8282\u70b9\u548c\u53cc\u8282\u70b9\n    \u5355\u8282\u70b9\u65f6\uff1a \u53d6\u6700\u6df1\u5b50\u6811+1\n    \u53cc\u8282\u70b9\u65f6\uff1a \u53d6\u6700\u6d45\u5b50\u6811+1\n\n\n\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if(root == NULL)\n            return 0;\n        int depl = minDepth(root->left);\n        int depr = minDepth(root->right);\n        if (root->left == NULL || root->right == NULL)\n        return (depl>depr?depl:depr)+1;\n        else {\n            if (depl < depr)\n                return depl + 1;\n            else\n                return depr + 1;\n        }\n    }\n};",
            "title": "Minimum Depth of Binary Tree"
        },
        {
            "location": "/\u9012\u5f52/Add Digits/",
            "text": "258. Add Digits\n\n\nGiven a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\n\nFor example:\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.\n\n\npublic int addDigits(int num) {\n    if(num < 0)\n        return num;\n    int value=0;\n    char [] sum = Integer.toString(num).toCharArray();\n    for (int i = 0; i < sum.length; i++) \n        value += (sum[i] - '0');\n\n    if(sum.length==1)\n        return value;\n    return  addDigits(value);\n}\n\n//\u6570\u5b66\u53d6\u4f59\npublic int addDigits(int num) {\n       return num==0?0:(num%9==0?9:(num%9));\n    }",
            "title": "Add Digits"
        },
        {
            "location": "/\u9012\u5f52/Invert Binary Tree/",
            "text": "226. Invert Binary Tree\n\n\nInvert a binary tree.\n\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n\nto\n\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if(root == NULL)\n            return NULL;\n        TreeNode* item = root->left;\n        root->left = root->right;\n        root->right = item;\n        invertTree(root->left);\n        invertTree(root->right);\n        return root;\n    }\n};",
            "title": "Invert Binary Tree"
        },
        {
            "location": "/\u6811/Merge Two Binary Trees/",
            "text": "617. Merge Two Binary Trees\n\n\nGiven two binary trees and imagine that when you put one of them to cover the other, \nsome nodes of the two trees are overlapped while the others are not.\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, \nthen sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\n\n\nExample 1:\nInput: \n\n\nTree 1                     Tree 2                  \n      1                         2                             \n     / \\                       / \\                            \n    3   2                     1   3                        \n   /                           \\   \\                      \n  5                             4   7\n\n\n\nOutput: \nMerged tree:\n\n\n     3\n    / \\\n   4   5\n  / \\   \\ \n 5   4   7\n\n\n\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n    if (t1 == NULL)\n        return t2;\n    if(t2 == NULL)\n        return t1;\n    t1->val += t2->val;\n    t1->left = mergeTrees(t1->left , t2->left);\n    t1->right = mergeTrees(t1->right , t2->right);\n    return t1;\n    }\n};",
            "title": "Merge Two Binary Trees"
        }
    ]
}